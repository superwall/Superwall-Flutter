// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum PFeatureGatingBehavior {
  gated,
  nonGated,
}

enum PPaywallCloseReason {
  /// The paywall was closed by system logic, either after a purchase, because
  /// a deeplink was presented, close button pressed, etc.
  systemLogic,
  /// The paywall was automatically closed because another paywall will show.
  ///
  /// This prevents ``Superwall/register(placement:params:handler:feature:)`` `feature`
  /// block from executing on dismiss of the paywall, because another paywall is set to show
  forNextPaywall,
  /// The paywall was closed because the webview couldn't be loaded.
  ///
  /// If this happens for a gated paywall, the ``PaywallPresentationHandler/onError(_:)``
  /// handler will be called. If it's for a non-gated paywall, the feature block will be called.
  webViewFailedToLoad,
  /// The paywall was closed because the user tapped the close button or dragged to dismiss.
  manualClose,
  /// The paywall hasn't been closed yet.
  none,
}

enum PLocalNotificationType {
  trialStarted,
  unsupported,
}

enum PComputedPropertyRequestType {
  minutesSince,
  hoursSince,
  daysSince,
  monthsSince,
  yearsSince,
  placementsInHour,
  placementsInDay,
  placementsInWeek,
  placementsInMonth,
  placementsSinceInstall,
}

enum PSurveyShowCondition {
  onManualClose,
  onPurchase,
}

enum PNetworkEnvironment {
  release,
  releaseCandidate,
  developer,
}

enum PLogLevel {
  debug,
  info,
  warn,
  error,
  none,
}

enum PTransactionBackgroundView {
  spinner,
  none,
}

enum PLogScope {
  localizationManager,
  bounceButton,
  coreData,
  configManager,
  identityManager,
  debugManager,
  debugViewController,
  localizationViewController,
  gameControllerManager,
  device,
  network,
  paywallEvents,
  productsManager,
  storeKitManager,
  placements,
  receipts,
  superwallCore,
  paywallPresentation,
  transactions,
  paywallViewController,
  cache,
  all,
}

enum PConfigurationStatus {
  pending,
  configured,
  failed,
}

enum PEventType {
  firstSeen,
  appOpen,
  appLaunch,
  identityAlias,
  appInstall,
  restoreStart,
  restoreComplete,
  restoreFail,
  sessionStart,
  deviceAttributes,
  subscriptionStatusDidChange,
  appClose,
  deepLink,
  triggerFire,
  paywallOpen,
  paywallClose,
  paywallDecline,
  transactionStart,
  transactionFail,
  transactionAbandon,
  transactionComplete,
  subscriptionStart,
  freeTrialStart,
  transactionRestore,
  transactionTimeout,
  userAttributes,
  nonRecurringProductPurchase,
  paywallResponseLoadStart,
  paywallResponseLoadNotFound,
  paywallResponseLoadFail,
  paywallResponseLoadComplete,
  paywallWebviewLoadStart,
  paywallWebviewLoadFail,
  paywallWebviewLoadComplete,
  paywallWebviewLoadTimeout,
  paywallWebviewLoadFallback,
  paywallProductsLoadRetry,
  paywallProductsLoadStart,
  paywallProductsLoadFail,
  paywallProductsLoadComplete,
  paywallResourceLoadFail,
  surveyResponse,
  paywallPresentationRequest,
  touchesBegan,
  surveyClose,
  reset,
  configRefresh,
  customPlacement,
  configAttributes,
  confirmAllAssignments,
  configFail,
  adServicesTokenRequestStart,
  adServicesTokenRequestFail,
  adServicesTokenRequestComplete,
  shimmerViewStart,
  shimmerViewComplete,
  redemptionStart,
  redemptionComplete,
  redemptionFail,
  enrichmentStart,
  enrichmentComplete,
  enrichmentFail,
  networkDecodingFail,
}

enum PSubscriptionStatusType {
  active,
  inactive,
  unknown,
}

enum PPaywallPresentationRequestStatusType {
  presentation,
  noPresentation,
  timeout,
}

enum PVariantType {
  treatment,
  holdout,
}

enum PPaywallSkippedReason {
  holdout,
  noAudienceMatch,
  placementNotFound,
}

sealed class PRedemptionResult {
}

class PSuccessRedemptionResult extends PRedemptionResult {
  PSuccessRedemptionResult({
    required this.code,
    required this.redemptionInfo,
  });

  String code;

  PRedemptionInfo redemptionInfo;

  List<Object?> _toList() {
    return <Object?>[
      code,
      redemptionInfo,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSuccessRedemptionResult decode(Object result) {
    result as List<Object?>;
    return PSuccessRedemptionResult(
      code: result[0]! as String,
      redemptionInfo: result[1]! as PRedemptionInfo,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSuccessRedemptionResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PErrorRedemptionResult extends PRedemptionResult {
  PErrorRedemptionResult({
    required this.code,
    required this.error,
  });

  String code;

  PErrorInfo error;

  List<Object?> _toList() {
    return <Object?>[
      code,
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PErrorRedemptionResult decode(Object result) {
    result as List<Object?>;
    return PErrorRedemptionResult(
      code: result[0]! as String,
      error: result[1]! as PErrorInfo,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PErrorRedemptionResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PErrorInfo {
  PErrorInfo({
    required this.message,
  });

  String message;

  List<Object?> _toList() {
    return <Object?>[
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static PErrorInfo decode(Object result) {
    result as List<Object?>;
    return PErrorInfo(
      message: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PErrorInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PExpiredCodeRedemptionResult extends PRedemptionResult {
  PExpiredCodeRedemptionResult({
    required this.code,
    required this.info,
  });

  String code;

  PExpiredCodeInfo info;

  List<Object?> _toList() {
    return <Object?>[
      code,
      info,
    ];
  }

  Object encode() {
    return _toList();  }

  static PExpiredCodeRedemptionResult decode(Object result) {
    result as List<Object?>;
    return PExpiredCodeRedemptionResult(
      code: result[0]! as String,
      info: result[1]! as PExpiredCodeInfo,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PExpiredCodeRedemptionResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Info about the expired code.
class PExpiredCodeInfo {
  PExpiredCodeInfo({
    required this.resent,
    this.obfuscatedEmail,
  });

  /// A boolean indicating whether the redemption email has been resent.
  bool resent;

  /// An optional String indicating the obfuscated email address that the
  /// redemption email was sent to.
  String? obfuscatedEmail;

  List<Object?> _toList() {
    return <Object?>[
      resent,
      obfuscatedEmail,
    ];
  }

  Object encode() {
    return _toList();  }

  static PExpiredCodeInfo decode(Object result) {
    result as List<Object?>;
    return PExpiredCodeInfo(
      resent: result[0]! as bool,
      obfuscatedEmail: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PExpiredCodeInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PInvalidCodeRedemptionResult extends PRedemptionResult {
  PInvalidCodeRedemptionResult({
    required this.code,
  });

  String code;

  List<Object?> _toList() {
    return <Object?>[
      code,
    ];
  }

  Object encode() {
    return _toList();  }

  static PInvalidCodeRedemptionResult decode(Object result) {
    result as List<Object?>;
    return PInvalidCodeRedemptionResult(
      code: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PInvalidCodeRedemptionResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PExpiredSubscriptionCode extends PRedemptionResult {
  PExpiredSubscriptionCode({
    required this.code,
    required this.redemptionInfo,
  });

  String code;

  PRedemptionInfo redemptionInfo;

  List<Object?> _toList() {
    return <Object?>[
      code,
      redemptionInfo,
    ];
  }

  Object encode() {
    return _toList();  }

  static PExpiredSubscriptionCode decode(Object result) {
    result as List<Object?>;
    return PExpiredSubscriptionCode(
      code: result[0]! as String,
      redemptionInfo: result[1]! as PRedemptionInfo,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PExpiredSubscriptionCode || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Information about the redemption.
class PRedemptionInfo {
  PRedemptionInfo({
    required this.ownership,
    required this.purchaserInfo,
    this.paywallInfo,
    required this.entitlements,
  });

  /// The ownership of the code.
  POwnership ownership;

  /// Info about the purchaser.
  PPurchaserInfo purchaserInfo;

  /// Info about the paywall the purchase was made from.
  PRedemptionPaywallInfo? paywallInfo;

  /// The entitlements array.
  List<PEntitlement> entitlements;

  List<Object?> _toList() {
    return <Object?>[
      ownership,
      purchaserInfo,
      paywallInfo,
      entitlements,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRedemptionInfo decode(Object result) {
    result as List<Object?>;
    return PRedemptionInfo(
      ownership: result[0]! as POwnership,
      purchaserInfo: result[1]! as PPurchaserInfo,
      paywallInfo: result[2] as PRedemptionPaywallInfo?,
      entitlements: (result[3] as List<Object?>?)!.cast<PEntitlement>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRedemptionInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Enum specifying code ownership.
sealed class POwnership {
}

class PAppUserOwnership extends POwnership {
  PAppUserOwnership({
    required this.appUserId,
  });

  String appUserId;

  List<Object?> _toList() {
    return <Object?>[
      appUserId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PAppUserOwnership decode(Object result) {
    result as List<Object?>;
    return PAppUserOwnership(
      appUserId: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PAppUserOwnership || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PDeviceOwnership extends POwnership {
  PDeviceOwnership({
    required this.deviceId,
  });

  String deviceId;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PDeviceOwnership decode(Object result) {
    result as List<Object?>;
    return PDeviceOwnership(
      deviceId: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PDeviceOwnership || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Info about the purchaser.
class PPurchaserInfo {
  PPurchaserInfo({
    required this.appUserId,
    this.email,
    required this.storeIdentifiers,
  });

  /// The app user ID of the purchaser.
  String appUserId;

  /// The email address of the purchaser.
  String? email;

  /// The identifiers of the store that was purchased from.
  PStoreIdentifiers storeIdentifiers;

  List<Object?> _toList() {
    return <Object?>[
      appUserId,
      email,
      storeIdentifiers,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaserInfo decode(Object result) {
    result as List<Object?>;
    return PPurchaserInfo(
      appUserId: result[0]! as String,
      email: result[1] as String?,
      storeIdentifiers: result[2]! as PStoreIdentifiers,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaserInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Identifiers of the store that was purchased from.
sealed class PStoreIdentifiers {
}

/// Stripe purchase store identifiers.
class PStripeStoreIdentifiers extends PStoreIdentifiers {
  PStripeStoreIdentifiers({
    required this.customerId,
    required this.subscriptionIds,
  });

  String customerId;

  List<String> subscriptionIds;

  List<Object?> _toList() {
    return <Object?>[
      customerId,
      subscriptionIds,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStripeStoreIdentifiers decode(Object result) {
    result as List<Object?>;
    return PStripeStoreIdentifiers(
      customerId: result[0]! as String,
      subscriptionIds: (result[1] as List<Object?>?)!.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStripeStoreIdentifiers || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Stripe purchase store identifiers.
class PPaddleStoreIdentifiers extends PStoreIdentifiers {
  PPaddleStoreIdentifiers({
    required this.customerId,
    required this.subscriptionIds,
  });

  String customerId;

  List<String> subscriptionIds;

  List<Object?> _toList() {
    return <Object?>[
      customerId,
      subscriptionIds,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaddleStoreIdentifiers decode(Object result) {
    result as List<Object?>;
    return PPaddleStoreIdentifiers(
      customerId: result[0]! as String,
      subscriptionIds: (result[1] as List<Object?>?)!.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaddleStoreIdentifiers || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Unknown purchase store identifiers.
class PUnknownStoreIdentifiers extends PStoreIdentifiers {
  PUnknownStoreIdentifiers({
    required this.store,
    required this.additionalInfo,
  });

  String store;

  Map<String, Object> additionalInfo;

  List<Object?> _toList() {
    return <Object?>[
      store,
      additionalInfo,
    ];
  }

  Object encode() {
    return _toList();  }

  static PUnknownStoreIdentifiers decode(Object result) {
    result as List<Object?>;
    return PUnknownStoreIdentifiers(
      store: result[0]! as String,
      additionalInfo: (result[1] as Map<Object?, Object?>?)!.cast<String, Object>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PUnknownStoreIdentifiers || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Info about the paywall the purchase was made from.
class PRedemptionPaywallInfo {
  PRedemptionPaywallInfo({
    required this.identifier,
    required this.placementName,
    required this.placementParams,
    required this.variantId,
    required this.experimentId,
  });

  /// The identifier of the paywall.
  String identifier;

  /// The name of the placement.
  String placementName;

  /// The params of the placement.
  Map<String, Object> placementParams;

  /// The ID of the paywall variant.
  String variantId;

  /// The ID of the experiment that the paywall belongs to.
  String experimentId;

  List<Object?> _toList() {
    return <Object?>[
      identifier,
      placementName,
      placementParams,
      variantId,
      experimentId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRedemptionPaywallInfo decode(Object result) {
    result as List<Object?>;
    return PRedemptionPaywallInfo(
      identifier: result[0]! as String,
      placementName: result[1]! as String,
      placementParams: (result[2] as Map<Object?, Object?>?)!.cast<String, Object>(),
      variantId: result[3]! as String,
      experimentId: result[4]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRedemptionPaywallInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PSuperwallOptions {
  PSuperwallOptions({
    this.paywalls,
    this.networkEnvironment,
    this.isExternalDataCollectionEnabled,
    this.localeIdentifier,
    this.isGameControllerEnabled,
    this.enableExperimentalDeviceVariables,
    this.logging,
    this.passIdentifiersToPlayStore,
  });

  PPaywallOptions? paywalls;

  PNetworkEnvironment? networkEnvironment;

  bool? isExternalDataCollectionEnabled;

  String? localeIdentifier;

  bool? isGameControllerEnabled;

  bool? enableExperimentalDeviceVariables;

  PLogging? logging;

  bool? passIdentifiersToPlayStore;

  List<Object?> _toList() {
    return <Object?>[
      paywalls,
      networkEnvironment,
      isExternalDataCollectionEnabled,
      localeIdentifier,
      isGameControllerEnabled,
      enableExperimentalDeviceVariables,
      logging,
      passIdentifiersToPlayStore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSuperwallOptions decode(Object result) {
    result as List<Object?>;
    return PSuperwallOptions(
      paywalls: result[0] as PPaywallOptions?,
      networkEnvironment: result[1] as PNetworkEnvironment?,
      isExternalDataCollectionEnabled: result[2] as bool?,
      localeIdentifier: result[3] as String?,
      isGameControllerEnabled: result[4] as bool?,
      enableExperimentalDeviceVariables: result[5] as bool?,
      logging: result[6] as PLogging?,
      passIdentifiersToPlayStore: result[7] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSuperwallOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallInfo {
  PPaywallInfo({
    this.identifier,
    this.name,
    this.experiment,
    this.productIds,
    this.products,
    this.url,
    this.presentedByPlacementWithName,
    this.presentedByPlacementWithId,
    this.presentedByPlacementAt,
    this.presentedBy,
    this.presentationSourceType,
    this.responseLoadStartTime,
    this.responseLoadCompleteTime,
    this.responseLoadFailTime,
    this.responseLoadDuration,
    this.webViewLoadStartTime,
    this.webViewLoadCompleteTime,
    this.webViewLoadFailTime,
    this.webViewLoadDuration,
    this.productsLoadStartTime,
    this.productsLoadCompleteTime,
    this.productsLoadFailTime,
    this.productsLoadDuration,
    this.paywalljsVersion,
    this.isFreeTrialAvailable,
    this.featureGatingBehavior,
    this.closeReason,
    this.localNotifications,
    this.computedPropertyRequests,
    this.surveys,
  });

  String? identifier;

  String? name;

  PExperiment? experiment;

  List<String>? productIds;

  List<PProduct>? products;

  String? url;

  String? presentedByPlacementWithName;

  String? presentedByPlacementWithId;

  String? presentedByPlacementAt;

  String? presentedBy;

  String? presentationSourceType;

  String? responseLoadStartTime;

  String? responseLoadCompleteTime;

  String? responseLoadFailTime;

  double? responseLoadDuration;

  String? webViewLoadStartTime;

  String? webViewLoadCompleteTime;

  String? webViewLoadFailTime;

  double? webViewLoadDuration;

  String? productsLoadStartTime;

  String? productsLoadCompleteTime;

  String? productsLoadFailTime;

  double? productsLoadDuration;

  String? paywalljsVersion;

  bool? isFreeTrialAvailable;

  PFeatureGatingBehavior? featureGatingBehavior;

  PPaywallCloseReason? closeReason;

  List<PLocalNotification>? localNotifications;

  List<PComputedPropertyRequest>? computedPropertyRequests;

  List<PSurvey>? surveys;

  List<Object?> _toList() {
    return <Object?>[
      identifier,
      name,
      experiment,
      productIds,
      products,
      url,
      presentedByPlacementWithName,
      presentedByPlacementWithId,
      presentedByPlacementAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallInfo decode(Object result) {
    result as List<Object?>;
    return PPaywallInfo(
      identifier: result[0] as String?,
      name: result[1] as String?,
      experiment: result[2] as PExperiment?,
      productIds: (result[3] as List<Object?>?)?.cast<String>(),
      products: (result[4] as List<Object?>?)?.cast<PProduct>(),
      url: result[5] as String?,
      presentedByPlacementWithName: result[6] as String?,
      presentedByPlacementWithId: result[7] as String?,
      presentedByPlacementAt: result[8] as String?,
      presentedBy: result[9] as String?,
      presentationSourceType: result[10] as String?,
      responseLoadStartTime: result[11] as String?,
      responseLoadCompleteTime: result[12] as String?,
      responseLoadFailTime: result[13] as String?,
      responseLoadDuration: result[14] as double?,
      webViewLoadStartTime: result[15] as String?,
      webViewLoadCompleteTime: result[16] as String?,
      webViewLoadFailTime: result[17] as String?,
      webViewLoadDuration: result[18] as double?,
      productsLoadStartTime: result[19] as String?,
      productsLoadCompleteTime: result[20] as String?,
      productsLoadFailTime: result[21] as String?,
      productsLoadDuration: result[22] as double?,
      paywalljsVersion: result[23] as String?,
      isFreeTrialAvailable: result[24] as bool?,
      featureGatingBehavior: result[25] as PFeatureGatingBehavior?,
      closeReason: result[26] as PPaywallCloseReason?,
      localNotifications: (result[27] as List<Object?>?)?.cast<PLocalNotification>(),
      computedPropertyRequests: (result[28] as List<Object?>?)?.cast<PComputedPropertyRequest>(),
      surveys: (result[29] as List<Object?>?)?.cast<PSurvey>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PProduct {
  PProduct({
    this.id,
    this.name,
    this.entitlements,
  });

  String? id;

  String? name;

  List<PEntitlement>? entitlements;

  List<Object?> _toList() {
    return <Object?>[
      id,
      name,
      entitlements,
    ];
  }

  Object encode() {
    return _toList();  }

  static PProduct decode(Object result) {
    result as List<Object?>;
    return PProduct(
      id: result[0] as String?,
      name: result[1] as String?,
      entitlements: (result[2] as List<Object?>?)?.cast<PEntitlement>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PProduct || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PLocalNotification {
  PLocalNotification({
    required this.id,
    required this.type,
    required this.title,
    this.subtitle,
    required this.body,
    required this.delay,
  });

  int id;

  PLocalNotificationType type;

  String title;

  String? subtitle;

  String body;

  int delay;

  List<Object?> _toList() {
    return <Object?>[
      id,
      type,
      title,
      subtitle,
      body,
      delay,
    ];
  }

  Object encode() {
    return _toList();  }

  static PLocalNotification decode(Object result) {
    result as List<Object?>;
    return PLocalNotification(
      id: result[0]! as int,
      type: result[1]! as PLocalNotificationType,
      title: result[2]! as String,
      subtitle: result[3] as String?,
      body: result[4]! as String,
      delay: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PLocalNotification || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PComputedPropertyRequest {
  PComputedPropertyRequest({
    required this.type,
    required this.eventName,
  });

  PComputedPropertyRequestType type;

  String eventName;

  List<Object?> _toList() {
    return <Object?>[
      type,
      eventName,
    ];
  }

  Object encode() {
    return _toList();  }

  static PComputedPropertyRequest decode(Object result) {
    result as List<Object?>;
    return PComputedPropertyRequest(
      type: result[0]! as PComputedPropertyRequestType,
      eventName: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PComputedPropertyRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PSurvey {
  PSurvey({
    required this.id,
    required this.assignmentKey,
    required this.title,
    required this.message,
    required this.options,
    required this.presentationCondition,
    required this.presentationProbability,
    required this.includeOtherOption,
    required this.includeCloseOption,
  });

  String id;

  String assignmentKey;

  String title;

  String message;

  List<PSurveyOption> options;

  PSurveyShowCondition presentationCondition;

  double presentationProbability;

  bool includeOtherOption;

  bool includeCloseOption;

  List<Object?> _toList() {
    return <Object?>[
      id,
      assignmentKey,
      title,
      message,
      options,
      presentationCondition,
      presentationProbability,
      includeOtherOption,
      includeCloseOption,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSurvey decode(Object result) {
    result as List<Object?>;
    return PSurvey(
      id: result[0]! as String,
      assignmentKey: result[1]! as String,
      title: result[2]! as String,
      message: result[3]! as String,
      options: (result[4] as List<Object?>?)!.cast<PSurveyOption>(),
      presentationCondition: result[5]! as PSurveyShowCondition,
      presentationProbability: result[6]! as double,
      includeOtherOption: result[7]! as bool,
      includeCloseOption: result[8]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSurvey || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PSurveyOption {
  PSurveyOption({
    this.id,
    this.text,
  });

  String? id;

  String? text;

  List<Object?> _toList() {
    return <Object?>[
      id,
      text,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSurveyOption decode(Object result) {
    result as List<Object?>;
    return PSurveyOption(
      id: result[0] as String?,
      text: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSurveyOption || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PPurchaseResult {
}

class PPurchaseCancelled extends PPurchaseResult {
  PPurchaseCancelled({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseCancelled decode(Object result) {
    result as List<Object?>;
    return PPurchaseCancelled(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseCancelled || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchasePurchased extends PPurchaseResult {
  PPurchasePurchased({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchasePurchased decode(Object result) {
    result as List<Object?>;
    return PPurchasePurchased(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchasePurchased || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchasePending extends PPurchaseResult {
  PPurchasePending({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchasePending decode(Object result) {
    result as List<Object?>;
    return PPurchasePending(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchasePending || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchaseFailed extends PPurchaseResult {
  PPurchaseFailed({
    this.error,
  });

  String? error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseFailed decode(Object result) {
    result as List<Object?>;
    return PPurchaseFailed(
      error: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PRestorationResult {
}

class PRestorationRestored extends PRestorationResult {
  PRestorationRestored({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestorationRestored decode(Object result) {
    result as List<Object?>;
    return PRestorationRestored(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestorationRestored || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PRestorationFailed extends PRestorationResult {
  PRestorationFailed({
    this.error,
  });

  String? error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestorationFailed decode(Object result) {
    result as List<Object?>;
    return PRestorationFailed(
      error: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestorationFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PRestoreType {
}

class PViaPurchase extends PRestoreType {
  PViaPurchase({
    this.storeTransaction,
  });

  PStoreTransaction? storeTransaction;

  List<Object?> _toList() {
    return <Object?>[
      storeTransaction,
    ];
  }

  Object encode() {
    return _toList();  }

  static PViaPurchase decode(Object result) {
    result as List<Object?>;
    return PViaPurchase(
      storeTransaction: result[0] as PStoreTransaction?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PViaPurchase || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PViaRestore extends PRestoreType {
  PViaRestore({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PViaRestore decode(Object result) {
    result as List<Object?>;
    return PViaRestore(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PViaRestore || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PRestoreFailed {
  PRestoreFailed({
    this.title,
    this.message,
    this.closeButtonTitle,
  });

  String? title;

  String? message;

  String? closeButtonTitle;

  List<Object?> _toList() {
    return <Object?>[
      title,
      message,
      closeButtonTitle,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestoreFailed decode(Object result) {
    result as List<Object?>;
    return PRestoreFailed(
      title: result[0] as String?,
      message: result[1] as String?,
      closeButtonTitle: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestoreFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PLogging {
  PLogging({
    this.level,
    this.scopes,
  });

  PLogLevel? level;

  List<PLogScope>? scopes;

  List<Object?> _toList() {
    return <Object?>[
      level,
      scopes,
    ];
  }

  Object encode() {
    return _toList();  }

  static PLogging decode(Object result) {
    result as List<Object?>;
    return PLogging(
      level: result[0] as PLogLevel?,
      scopes: (result[1] as List<Object?>?)?.cast<PLogScope>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PLogging || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStoreTransaction {
  PStoreTransaction({
    required this.configRequestId,
    required this.appSessionId,
    this.transactionDate,
    required this.originalTransactionIdentifier,
    this.storeTransactionId,
    this.originalTransactionDate,
    this.webOrderLineItemID,
    this.appBundleId,
    this.subscriptionGroupId,
    this.isUpgraded,
    this.expirationDate,
    this.offerId,
    this.revocationDate,
  });

  String configRequestId;

  String appSessionId;

  String? transactionDate;

  String originalTransactionIdentifier;

  String? storeTransactionId;

  String? originalTransactionDate;

  String? webOrderLineItemID;

  String? appBundleId;

  String? subscriptionGroupId;

  bool? isUpgraded;

  String? expirationDate;

  String? offerId;

  String? revocationDate;

  List<Object?> _toList() {
    return <Object?>[
      configRequestId,
      appSessionId,
      transactionDate,
      originalTransactionIdentifier,
      storeTransactionId,
      originalTransactionDate,
      webOrderLineItemID,
      appBundleId,
      subscriptionGroupId,
      isUpgraded,
      expirationDate,
      offerId,
      revocationDate,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStoreTransaction decode(Object result) {
    result as List<Object?>;
    return PStoreTransaction(
      configRequestId: result[0]! as String,
      appSessionId: result[1]! as String,
      transactionDate: result[2] as String?,
      originalTransactionIdentifier: result[3]! as String,
      storeTransactionId: result[4] as String?,
      originalTransactionDate: result[5] as String?,
      webOrderLineItemID: result[6] as String?,
      appBundleId: result[7] as String?,
      subscriptionGroupId: result[8] as String?,
      isUpgraded: result[9] as bool?,
      expirationDate: result[10] as String?,
      offerId: result[11] as String?,
      revocationDate: result[12] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStoreTransaction || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStoreProduct {
  PStoreProduct({
    required this.entitlements,
    required this.productIdentifier,
    this.subscriptionGroupIdentifier,
    required this.attributes,
    required this.localizedPrice,
    required this.localizedSubscriptionPeriod,
    required this.period,
    required this.periodly,
    required this.periodWeeks,
    required this.periodWeeksString,
    required this.periodMonths,
    required this.periodMonthsString,
    required this.periodYears,
    required this.periodYearsString,
    required this.periodDays,
    required this.periodDaysString,
    required this.dailyPrice,
    required this.weeklyPrice,
    required this.monthlyPrice,
    required this.yearlyPrice,
    required this.hasFreeTrial,
    this.trialPeriodEndDate,
    required this.trialPeriodEndDateString,
    required this.localizedTrialPeriodPrice,
    required this.trialPeriodPrice,
    required this.trialPeriodDays,
    required this.trialPeriodDaysString,
    required this.trialPeriodWeeks,
    required this.trialPeriodWeeksString,
    required this.trialPeriodMonths,
    required this.trialPeriodMonthsString,
    required this.trialPeriodYears,
    required this.trialPeriodYearsString,
    required this.trialPeriodText,
    required this.locale,
    this.languageCode,
    this.currencySymbol,
    this.currencyCode,
    required this.isFamilyShareable,
    this.regionCode,
    required this.price,
  });

  List<PEntitlement> entitlements;

  String productIdentifier;

  String? subscriptionGroupIdentifier;

  Map<String, String> attributes;

  String localizedPrice;

  String localizedSubscriptionPeriod;

  String period;

  String periodly;

  int periodWeeks;

  String periodWeeksString;

  int periodMonths;

  String periodMonthsString;

  int periodYears;

  String periodYearsString;

  int periodDays;

  String periodDaysString;

  String dailyPrice;

  String weeklyPrice;

  String monthlyPrice;

  String yearlyPrice;

  bool hasFreeTrial;

  String? trialPeriodEndDate;

  String trialPeriodEndDateString;

  String localizedTrialPeriodPrice;

  double trialPeriodPrice;

  int trialPeriodDays;

  String trialPeriodDaysString;

  int trialPeriodWeeks;

  String trialPeriodWeeksString;

  int trialPeriodMonths;

  String trialPeriodMonthsString;

  int trialPeriodYears;

  String trialPeriodYearsString;

  String trialPeriodText;

  String locale;

  String? languageCode;

  String? currencySymbol;

  String? currencyCode;

  bool isFamilyShareable;

  String? regionCode;

  double price;

  List<Object?> _toList() {
    return <Object?>[
      entitlements,
      productIdentifier,
      subscriptionGroupIdentifier,
      attributes,
      localizedPrice,
      localizedSubscriptionPeriod,
      period,
      periodly,
      periodWeeks,
      periodWeeksString,
      periodMonths,
      periodMonthsString,
      periodYears,
      periodYearsString,
      periodDays,
      periodDaysString,
      dailyPrice,
      weeklyPrice,
      monthlyPrice,
      yearlyPrice,
      hasFreeTrial,
      trialPeriodEndDate,
      trialPeriodEndDateString,
      localizedTrialPeriodPrice,
      trialPeriodPrice,
      trialPeriodDays,
      trialPeriodDaysString,
      trialPeriodWeeks,
      trialPeriodWeeksString,
      trialPeriodMonths,
      trialPeriodMonthsString,
      trialPeriodYears,
      trialPeriodYearsString,
      trialPeriodText,
      locale,
      languageCode,
      currencySymbol,
      currencyCode,
      isFamilyShareable,
      regionCode,
      price,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStoreProduct decode(Object result) {
    result as List<Object?>;
    return PStoreProduct(
      entitlements: (result[0] as List<Object?>?)!.cast<PEntitlement>(),
      productIdentifier: result[1]! as String,
      subscriptionGroupIdentifier: result[2] as String?,
      attributes: (result[3] as Map<Object?, Object?>?)!.cast<String, String>(),
      localizedPrice: result[4]! as String,
      localizedSubscriptionPeriod: result[5]! as String,
      period: result[6]! as String,
      periodly: result[7]! as String,
      periodWeeks: result[8]! as int,
      periodWeeksString: result[9]! as String,
      periodMonths: result[10]! as int,
      periodMonthsString: result[11]! as String,
      periodYears: result[12]! as int,
      periodYearsString: result[13]! as String,
      periodDays: result[14]! as int,
      periodDaysString: result[15]! as String,
      dailyPrice: result[16]! as String,
      weeklyPrice: result[17]! as String,
      monthlyPrice: result[18]! as String,
      yearlyPrice: result[19]! as String,
      hasFreeTrial: result[20]! as bool,
      trialPeriodEndDate: result[21] as String?,
      trialPeriodEndDateString: result[22]! as String,
      localizedTrialPeriodPrice: result[23]! as String,
      trialPeriodPrice: result[24]! as double,
      trialPeriodDays: result[25]! as int,
      trialPeriodDaysString: result[26]! as String,
      trialPeriodWeeks: result[27]! as int,
      trialPeriodWeeksString: result[28]! as String,
      trialPeriodMonths: result[29]! as int,
      trialPeriodMonthsString: result[30]! as String,
      trialPeriodYears: result[31]! as int,
      trialPeriodYearsString: result[32]! as String,
      trialPeriodText: result[33]! as String,
      locale: result[34]! as String,
      languageCode: result[35] as String?,
      currencySymbol: result[36] as String?,
      currencyCode: result[37] as String?,
      isFamilyShareable: result[38]! as bool,
      regionCode: result[39] as String?,
      price: result[40]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStoreProduct || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallOptions {
  PPaywallOptions({
    this.isHapticFeedbackEnabled,
    this.restoreFailed,
    this.shouldShowPurchaseFailureAlert,
    this.shouldPreload,
    this.automaticallyDismiss,
    this.shouldShowWebRestorationAlert,
    this.transactionBackgroundView,
    this.overrideProductsByName,
    this.shouldShowWebPurchaseConfirmationAlert,
  });

  bool? isHapticFeedbackEnabled;

  PRestoreFailed? restoreFailed;

  bool? shouldShowPurchaseFailureAlert;

  bool? shouldPreload;

  bool? automaticallyDismiss;

  bool? shouldShowWebRestorationAlert;

  PTransactionBackgroundView? transactionBackgroundView;

  Map<String, String>? overrideProductsByName;

  bool? shouldShowWebPurchaseConfirmationAlert;

  List<Object?> _toList() {
    return <Object?>[
      isHapticFeedbackEnabled,
      restoreFailed,
      shouldShowPurchaseFailureAlert,
      shouldPreload,
      automaticallyDismiss,
      shouldShowWebRestorationAlert,
      transactionBackgroundView,
      overrideProductsByName,
      shouldShowWebPurchaseConfirmationAlert,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallOptions decode(Object result) {
    result as List<Object?>;
    return PPaywallOptions(
      isHapticFeedbackEnabled: result[0] as bool?,
      restoreFailed: result[1] as PRestoreFailed?,
      shouldShowPurchaseFailureAlert: result[2] as bool?,
      shouldPreload: result[3] as bool?,
      automaticallyDismiss: result[4] as bool?,
      shouldShowWebRestorationAlert: result[5] as bool?,
      transactionBackgroundView: result[6] as PTransactionBackgroundView?,
      overrideProductsByName: (result[7] as Map<Object?, Object?>?)?.cast<String, String>(),
      shouldShowWebPurchaseConfirmationAlert: result[8] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchaseControllerHost {
  PPurchaseControllerHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseControllerHost decode(Object result) {
    result as List<Object?>;
    return PPurchaseControllerHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseControllerHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PConfigureCompletionHost {
  PConfigureCompletionHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PConfigureCompletionHost decode(Object result) {
    result as List<Object?>;
    return PConfigureCompletionHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PConfigureCompletionHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallPresentationHandlerHost {
  PPaywallPresentationHandlerHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallPresentationHandlerHost decode(Object result) {
    result as List<Object?>;
    return PPaywallPresentationHandlerHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallPresentationHandlerHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PFeatureHandlerHost {
  PFeatureHandlerHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PFeatureHandlerHost decode(Object result) {
    result as List<Object?>;
    return PFeatureHandlerHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PFeatureHandlerHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PEntitlement {
  PEntitlement({
    this.id,
  });

  String? id;

  List<Object?> _toList() {
    return <Object?>[
      id,
    ];
  }

  Object encode() {
    return _toList();  }

  static PEntitlement decode(Object result) {
    result as List<Object?>;
    return PEntitlement(
      id: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PEntitlement || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PEntitlements {
  PEntitlements({
    required this.active,
    required this.inactive,
    required this.all,
  });

  List<PEntitlement> active;

  List<PEntitlement> inactive;

  List<PEntitlement> all;

  List<Object?> _toList() {
    return <Object?>[
      active,
      inactive,
      all,
    ];
  }

  Object encode() {
    return _toList();  }

  static PEntitlements decode(Object result) {
    result as List<Object?>;
    return PEntitlements(
      active: (result[0] as List<Object?>?)!.cast<PEntitlement>(),
      inactive: (result[1] as List<Object?>?)!.cast<PEntitlement>(),
      all: (result[2] as List<Object?>?)!.cast<PEntitlement>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PEntitlements || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PSubscriptionStatus {
}

class PActive extends PSubscriptionStatus {
  PActive({
    required this.entitlements,
  });

  List<PEntitlement> entitlements;

  List<Object?> _toList() {
    return <Object?>[
      entitlements,
    ];
  }

  Object encode() {
    return _toList();  }

  static PActive decode(Object result) {
    result as List<Object?>;
    return PActive(
      entitlements: (result[0] as List<Object?>?)!.cast<PEntitlement>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PActive || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PInactive extends PSubscriptionStatus {
  PInactive({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PInactive decode(Object result) {
    result as List<Object?>;
    return PInactive(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PInactive || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PUnknown extends PSubscriptionStatus {
  PUnknown({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PUnknown decode(Object result) {
    result as List<Object?>;
    return PUnknown(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PUnknown || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PSuperwallEventInfo {
  PSuperwallEventInfo({
    required this.eventType,
    this.params,
    this.placementName,
    this.deviceAttributes,
    this.deepLinkUrl,
    this.result,
    this.paywallInfo,
    this.transaction,
    this.product,
    this.error,
    this.triggeredPlacementName,
    this.attempt,
    this.name,
    this.survey,
    this.selectedOption,
    this.customResponse,
    this.status,
    this.reason,
    this.restoreType,
    this.userAttributes,
    this.token,
    this.userEnrichment,
    this.deviceEnrichment,
    this.message,
  });

  PEventType eventType;

  Map<String, Object>? params;

  String? placementName;

  Map<String, Object>? deviceAttributes;

  String? deepLinkUrl;

  PTriggerResult? result;

  PPaywallInfo? paywallInfo;

  PStoreTransaction? transaction;

  PStoreProduct? product;

  String? error;

  String? triggeredPlacementName;

  int? attempt;

  String? name;

  PSurvey? survey;

  PSurveyOption? selectedOption;

  String? customResponse;

  PPaywallPresentationRequestStatusType? status;

  PPaywallPresentationRequestStatusReason? reason;

  PRestoreType? restoreType;

  Map<String, Object>? userAttributes;

  String? token;

  Map<String, Object>? userEnrichment;

  Map<String, Object>? deviceEnrichment;

  String? message;

  List<Object?> _toList() {
    return <Object?>[
      eventType,
      params,
      placementName,
      deviceAttributes,
      deepLinkUrl,
      result,
      paywallInfo,
      transaction,
      product,
      error,
      triggeredPlacementName,
      attempt,
      name,
      survey,
      selectedOption,
      customResponse,
      status,
      reason,
      restoreType,
      userAttributes,
      token,
      userEnrichment,
      deviceEnrichment,
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSuperwallEventInfo decode(Object result) {
    result as List<Object?>;
    return PSuperwallEventInfo(
      eventType: result[0]! as PEventType,
      params: (result[1] as Map<Object?, Object?>?)?.cast<String, Object>(),
      placementName: result[2] as String?,
      deviceAttributes: (result[3] as Map<Object?, Object?>?)?.cast<String, Object>(),
      deepLinkUrl: result[4] as String?,
      result: result[5] as PTriggerResult?,
      paywallInfo: result[6] as PPaywallInfo?,
      transaction: result[7] as PStoreTransaction?,
      product: result[8] as PStoreProduct?,
      error: result[9] as String?,
      triggeredPlacementName: result[10] as String?,
      attempt: result[11] as int?,
      name: result[12] as String?,
      survey: result[13] as PSurvey?,
      selectedOption: result[14] as PSurveyOption?,
      customResponse: result[15] as String?,
      status: result[16] as PPaywallPresentationRequestStatusType?,
      reason: result[17] as PPaywallPresentationRequestStatusReason?,
      restoreType: result[18] as PRestoreType?,
      userAttributes: (result[19] as Map<Object?, Object?>?)?.cast<String, Object>(),
      token: result[20] as String?,
      userEnrichment: (result[21] as Map<Object?, Object?>?)?.cast<String, Object>(),
      deviceEnrichment: (result[22] as Map<Object?, Object?>?)?.cast<String, Object>(),
      message: result[23] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSuperwallEventInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PPaywallPresentationRequestStatusReason {
}

class PStatusReasonDebuggerPresented extends PPaywallPresentationRequestStatusReason {
  PStatusReasonDebuggerPresented({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonDebuggerPresented decode(Object result) {
    result as List<Object?>;
    return PStatusReasonDebuggerPresented(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonDebuggerPresented || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonPaywallAlreadyPresented extends PPaywallPresentationRequestStatusReason {
  PStatusReasonPaywallAlreadyPresented({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonPaywallAlreadyPresented decode(Object result) {
    result as List<Object?>;
    return PStatusReasonPaywallAlreadyPresented(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonPaywallAlreadyPresented || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonHoldout extends PPaywallPresentationRequestStatusReason {
  PStatusReasonHoldout({
    required this.experiment,
  });

  PExperiment experiment;

  List<Object?> _toList() {
    return <Object?>[
      experiment,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonHoldout decode(Object result) {
    result as List<Object?>;
    return PStatusReasonHoldout(
      experiment: result[0]! as PExperiment,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonHoldout || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonNoAudienceMatch extends PPaywallPresentationRequestStatusReason {
  PStatusReasonNoAudienceMatch({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonNoAudienceMatch decode(Object result) {
    result as List<Object?>;
    return PStatusReasonNoAudienceMatch(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonNoAudienceMatch || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonPlacementNotFound extends PPaywallPresentationRequestStatusReason {
  PStatusReasonPlacementNotFound({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonPlacementNotFound decode(Object result) {
    result as List<Object?>;
    return PStatusReasonPlacementNotFound(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonPlacementNotFound || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonNoPaywallVc extends PPaywallPresentationRequestStatusReason {
  PStatusReasonNoPaywallVc({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonNoPaywallVc decode(Object result) {
    result as List<Object?>;
    return PStatusReasonNoPaywallVc(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonNoPaywallVc || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonNoPresenter extends PPaywallPresentationRequestStatusReason {
  PStatusReasonNoPresenter({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonNoPresenter decode(Object result) {
    result as List<Object?>;
    return PStatusReasonNoPresenter(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonNoPresenter || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonNoConfig extends PPaywallPresentationRequestStatusReason {
  PStatusReasonNoConfig({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonNoConfig decode(Object result) {
    result as List<Object?>;
    return PStatusReasonNoConfig(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonNoConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PStatusReasonSubsStatusTimeout extends PPaywallPresentationRequestStatusReason {
  PStatusReasonSubsStatusTimeout({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PStatusReasonSubsStatusTimeout decode(Object result) {
    result as List<Object?>;
    return PStatusReasonSubsStatusTimeout(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PStatusReasonSubsStatusTimeout || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PIdentityOptions {
  PIdentityOptions({
    this.restorePaywallAssignments,
  });

  bool? restorePaywallAssignments;

  List<Object?> _toList() {
    return <Object?>[
      restorePaywallAssignments,
    ];
  }

  Object encode() {
    return _toList();  }

  static PIdentityOptions decode(Object result) {
    result as List<Object?>;
    return PIdentityOptions(
      restorePaywallAssignments: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PIdentityOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PExperiment {
  PExperiment({
    required this.id,
    required this.groupId,
    required this.variant,
  });

  String id;

  String groupId;

  PVariant variant;

  List<Object?> _toList() {
    return <Object?>[
      id,
      groupId,
      variant,
    ];
  }

  Object encode() {
    return _toList();  }

  static PExperiment decode(Object result) {
    result as List<Object?>;
    return PExperiment(
      id: result[0]! as String,
      groupId: result[1]! as String,
      variant: result[2]! as PVariant,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PExperiment || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PTriggerResult {
}

class PPlacementNotFoundTriggerResult extends PTriggerResult {
  PPlacementNotFoundTriggerResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPlacementNotFoundTriggerResult decode(Object result) {
    result as List<Object?>;
    return PPlacementNotFoundTriggerResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPlacementNotFoundTriggerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PNoAudienceMatchTriggerResult extends PTriggerResult {
  PNoAudienceMatchTriggerResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PNoAudienceMatchTriggerResult decode(Object result) {
    result as List<Object?>;
    return PNoAudienceMatchTriggerResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PNoAudienceMatchTriggerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallTriggerResult extends PTriggerResult {
  PPaywallTriggerResult({
    required this.experiment,
  });

  PExperiment experiment;

  List<Object?> _toList() {
    return <Object?>[
      experiment,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallTriggerResult decode(Object result) {
    result as List<Object?>;
    return PPaywallTriggerResult(
      experiment: result[0]! as PExperiment,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallTriggerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PHoldoutTriggerResult extends PTriggerResult {
  PHoldoutTriggerResult({
    required this.experiment,
  });

  PExperiment experiment;

  List<Object?> _toList() {
    return <Object?>[
      experiment,
    ];
  }

  Object encode() {
    return _toList();  }

  static PHoldoutTriggerResult decode(Object result) {
    result as List<Object?>;
    return PHoldoutTriggerResult(
      experiment: result[0]! as PExperiment,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PHoldoutTriggerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PErrorTriggerResult extends PTriggerResult {
  PErrorTriggerResult({
    required this.error,
  });

  String error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PErrorTriggerResult decode(Object result) {
    result as List<Object?>;
    return PErrorTriggerResult(
      error: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PErrorTriggerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PVariant {
  PVariant({
    required this.id,
    required this.type,
    this.paywallId,
  });

  String id;

  PVariantType type;

  String? paywallId;

  List<Object?> _toList() {
    return <Object?>[
      id,
      type,
      paywallId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PVariant decode(Object result) {
    result as List<Object?>;
    return PVariant(
      id: result[0]! as String,
      type: result[1]! as PVariantType,
      paywallId: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PVariant || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PConfirmedAssignment {
  PConfirmedAssignment({
    required this.experimentId,
    required this.variant,
  });

  String experimentId;

  PVariant variant;

  List<Object?> _toList() {
    return <Object?>[
      experimentId,
      variant,
    ];
  }

  Object encode() {
    return _toList();  }

  static PConfirmedAssignment decode(Object result) {
    result as List<Object?>;
    return PConfirmedAssignment(
      experimentId: result[0]! as String,
      variant: result[1]! as PVariant,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PConfirmedAssignment || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PPaywallResult {
}

class PPurchasedPaywallResult extends PPaywallResult {
  PPurchasedPaywallResult({
    required this.productId,
  });

  String productId;

  List<Object?> _toList() {
    return <Object?>[
      productId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchasedPaywallResult decode(Object result) {
    result as List<Object?>;
    return PPurchasedPaywallResult(
      productId: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchasedPaywallResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PDeclinedPaywallResult extends PPaywallResult {
  PDeclinedPaywallResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PDeclinedPaywallResult decode(Object result) {
    result as List<Object?>;
    return PDeclinedPaywallResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PDeclinedPaywallResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PRestoredPaywallResult extends PPaywallResult {
  PRestoredPaywallResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestoredPaywallResult decode(Object result) {
    result as List<Object?>;
    return PRestoredPaywallResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestoredPaywallResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PPresentationResult {
}

class PPlacementNotFoundPresentationResult extends PPresentationResult {
  PPlacementNotFoundPresentationResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPlacementNotFoundPresentationResult decode(Object result) {
    result as List<Object?>;
    return PPlacementNotFoundPresentationResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPlacementNotFoundPresentationResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PNoAudienceMatchPresentationResult extends PPresentationResult {
  PNoAudienceMatchPresentationResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PNoAudienceMatchPresentationResult decode(Object result) {
    result as List<Object?>;
    return PNoAudienceMatchPresentationResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PNoAudienceMatchPresentationResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallPresentationResult extends PPresentationResult {
  PPaywallPresentationResult({
    required this.experiment,
  });

  PExperiment experiment;

  List<Object?> _toList() {
    return <Object?>[
      experiment,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallPresentationResult decode(Object result) {
    result as List<Object?>;
    return PPaywallPresentationResult(
      experiment: result[0]! as PExperiment,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallPresentationResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PHoldoutPresentationResult extends PPresentationResult {
  PHoldoutPresentationResult({
    required this.experiment,
  });

  PExperiment experiment;

  List<Object?> _toList() {
    return <Object?>[
      experiment,
    ];
  }

  Object encode() {
    return _toList();  }

  static PHoldoutPresentationResult decode(Object result) {
    result as List<Object?>;
    return PHoldoutPresentationResult(
      experiment: result[0]! as PExperiment,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PHoldoutPresentationResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallNotAvailablePresentationResult extends PPresentationResult {
  PPaywallNotAvailablePresentationResult({
    this.ignore,
  });

  bool? ignore;

  List<Object?> _toList() {
    return <Object?>[
      ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallNotAvailablePresentationResult decode(Object result) {
    result as List<Object?>;
    return PPaywallNotAvailablePresentationResult(
      ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallNotAvailablePresentationResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PFeatureGatingBehavior) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PPaywallCloseReason) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PLocalNotificationType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is PComputedPropertyRequestType) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is PSurveyShowCondition) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is PNetworkEnvironment) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is PLogLevel) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is PTransactionBackgroundView) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is PLogScope) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is PConfigurationStatus) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is PEventType) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    }    else if (value is PSubscriptionStatusType) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    }    else if (value is PPaywallPresentationRequestStatusType) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    }    else if (value is PVariantType) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    }    else if (value is PPaywallSkippedReason) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    }    else if (value is PSuccessRedemptionResult) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is PErrorRedemptionResult) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is PErrorInfo) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is PExpiredCodeRedemptionResult) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is PExpiredCodeInfo) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is PInvalidCodeRedemptionResult) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is PExpiredSubscriptionCode) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is PRedemptionInfo) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    }    else if (value is PAppUserOwnership) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    }    else if (value is PDeviceOwnership) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaserInfo) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    }    else if (value is PStripeStoreIdentifiers) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    }    else if (value is PPaddleStoreIdentifiers) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    }    else if (value is PUnknownStoreIdentifiers) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    }    else if (value is PRedemptionPaywallInfo) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    }    else if (value is PSuperwallOptions) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallInfo) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    }    else if (value is PProduct) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    }    else if (value is PLocalNotification) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    }    else if (value is PComputedPropertyRequest) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    }    else if (value is PSurvey) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    }    else if (value is PSurveyOption) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseCancelled) {
      buffer.putUint8(166);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchasePurchased) {
      buffer.putUint8(167);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchasePending) {
      buffer.putUint8(168);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseFailed) {
      buffer.putUint8(169);
      writeValue(buffer, value.encode());
    }    else if (value is PRestorationRestored) {
      buffer.putUint8(170);
      writeValue(buffer, value.encode());
    }    else if (value is PRestorationFailed) {
      buffer.putUint8(171);
      writeValue(buffer, value.encode());
    }    else if (value is PViaPurchase) {
      buffer.putUint8(172);
      writeValue(buffer, value.encode());
    }    else if (value is PViaRestore) {
      buffer.putUint8(173);
      writeValue(buffer, value.encode());
    }    else if (value is PRestoreFailed) {
      buffer.putUint8(174);
      writeValue(buffer, value.encode());
    }    else if (value is PLogging) {
      buffer.putUint8(175);
      writeValue(buffer, value.encode());
    }    else if (value is PStoreTransaction) {
      buffer.putUint8(176);
      writeValue(buffer, value.encode());
    }    else if (value is PStoreProduct) {
      buffer.putUint8(177);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallOptions) {
      buffer.putUint8(178);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseControllerHost) {
      buffer.putUint8(179);
      writeValue(buffer, value.encode());
    }    else if (value is PConfigureCompletionHost) {
      buffer.putUint8(180);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallPresentationHandlerHost) {
      buffer.putUint8(181);
      writeValue(buffer, value.encode());
    }    else if (value is PFeatureHandlerHost) {
      buffer.putUint8(182);
      writeValue(buffer, value.encode());
    }    else if (value is PEntitlement) {
      buffer.putUint8(183);
      writeValue(buffer, value.encode());
    }    else if (value is PEntitlements) {
      buffer.putUint8(184);
      writeValue(buffer, value.encode());
    }    else if (value is PActive) {
      buffer.putUint8(185);
      writeValue(buffer, value.encode());
    }    else if (value is PInactive) {
      buffer.putUint8(186);
      writeValue(buffer, value.encode());
    }    else if (value is PUnknown) {
      buffer.putUint8(187);
      writeValue(buffer, value.encode());
    }    else if (value is PSuperwallEventInfo) {
      buffer.putUint8(188);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonDebuggerPresented) {
      buffer.putUint8(189);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonPaywallAlreadyPresented) {
      buffer.putUint8(190);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonHoldout) {
      buffer.putUint8(191);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonNoAudienceMatch) {
      buffer.putUint8(192);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonPlacementNotFound) {
      buffer.putUint8(193);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonNoPaywallVc) {
      buffer.putUint8(194);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonNoPresenter) {
      buffer.putUint8(195);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonNoConfig) {
      buffer.putUint8(196);
      writeValue(buffer, value.encode());
    }    else if (value is PStatusReasonSubsStatusTimeout) {
      buffer.putUint8(197);
      writeValue(buffer, value.encode());
    }    else if (value is PIdentityOptions) {
      buffer.putUint8(198);
      writeValue(buffer, value.encode());
    }    else if (value is PExperiment) {
      buffer.putUint8(199);
      writeValue(buffer, value.encode());
    }    else if (value is PPlacementNotFoundTriggerResult) {
      buffer.putUint8(200);
      writeValue(buffer, value.encode());
    }    else if (value is PNoAudienceMatchTriggerResult) {
      buffer.putUint8(201);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallTriggerResult) {
      buffer.putUint8(202);
      writeValue(buffer, value.encode());
    }    else if (value is PHoldoutTriggerResult) {
      buffer.putUint8(203);
      writeValue(buffer, value.encode());
    }    else if (value is PErrorTriggerResult) {
      buffer.putUint8(204);
      writeValue(buffer, value.encode());
    }    else if (value is PVariant) {
      buffer.putUint8(205);
      writeValue(buffer, value.encode());
    }    else if (value is PConfirmedAssignment) {
      buffer.putUint8(206);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchasedPaywallResult) {
      buffer.putUint8(207);
      writeValue(buffer, value.encode());
    }    else if (value is PDeclinedPaywallResult) {
      buffer.putUint8(208);
      writeValue(buffer, value.encode());
    }    else if (value is PRestoredPaywallResult) {
      buffer.putUint8(209);
      writeValue(buffer, value.encode());
    }    else if (value is PPlacementNotFoundPresentationResult) {
      buffer.putUint8(210);
      writeValue(buffer, value.encode());
    }    else if (value is PNoAudienceMatchPresentationResult) {
      buffer.putUint8(211);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallPresentationResult) {
      buffer.putUint8(212);
      writeValue(buffer, value.encode());
    }    else if (value is PHoldoutPresentationResult) {
      buffer.putUint8(213);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallNotAvailablePresentationResult) {
      buffer.putUint8(214);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PFeatureGatingBehavior.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PPaywallCloseReason.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLocalNotificationType.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PComputedPropertyRequestType.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PSurveyShowCondition.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PNetworkEnvironment.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLogLevel.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PTransactionBackgroundView.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLogScope.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PConfigurationStatus.values[value];
      case 139: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PEventType.values[value];
      case 140: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PSubscriptionStatusType.values[value];
      case 141: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PPaywallPresentationRequestStatusType.values[value];
      case 142: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PVariantType.values[value];
      case 143: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PPaywallSkippedReason.values[value];
      case 144: 
        return PSuccessRedemptionResult.decode(readValue(buffer)!);
      case 145: 
        return PErrorRedemptionResult.decode(readValue(buffer)!);
      case 146: 
        return PErrorInfo.decode(readValue(buffer)!);
      case 147: 
        return PExpiredCodeRedemptionResult.decode(readValue(buffer)!);
      case 148: 
        return PExpiredCodeInfo.decode(readValue(buffer)!);
      case 149: 
        return PInvalidCodeRedemptionResult.decode(readValue(buffer)!);
      case 150: 
        return PExpiredSubscriptionCode.decode(readValue(buffer)!);
      case 151: 
        return PRedemptionInfo.decode(readValue(buffer)!);
      case 152: 
        return PAppUserOwnership.decode(readValue(buffer)!);
      case 153: 
        return PDeviceOwnership.decode(readValue(buffer)!);
      case 154: 
        return PPurchaserInfo.decode(readValue(buffer)!);
      case 155: 
        return PStripeStoreIdentifiers.decode(readValue(buffer)!);
      case 156: 
        return PPaddleStoreIdentifiers.decode(readValue(buffer)!);
      case 157: 
        return PUnknownStoreIdentifiers.decode(readValue(buffer)!);
      case 158: 
        return PRedemptionPaywallInfo.decode(readValue(buffer)!);
      case 159: 
        return PSuperwallOptions.decode(readValue(buffer)!);
      case 160: 
        return PPaywallInfo.decode(readValue(buffer)!);
      case 161: 
        return PProduct.decode(readValue(buffer)!);
      case 162: 
        return PLocalNotification.decode(readValue(buffer)!);
      case 163: 
        return PComputedPropertyRequest.decode(readValue(buffer)!);
      case 164: 
        return PSurvey.decode(readValue(buffer)!);
      case 165: 
        return PSurveyOption.decode(readValue(buffer)!);
      case 166: 
        return PPurchaseCancelled.decode(readValue(buffer)!);
      case 167: 
        return PPurchasePurchased.decode(readValue(buffer)!);
      case 168: 
        return PPurchasePending.decode(readValue(buffer)!);
      case 169: 
        return PPurchaseFailed.decode(readValue(buffer)!);
      case 170: 
        return PRestorationRestored.decode(readValue(buffer)!);
      case 171: 
        return PRestorationFailed.decode(readValue(buffer)!);
      case 172: 
        return PViaPurchase.decode(readValue(buffer)!);
      case 173: 
        return PViaRestore.decode(readValue(buffer)!);
      case 174: 
        return PRestoreFailed.decode(readValue(buffer)!);
      case 175: 
        return PLogging.decode(readValue(buffer)!);
      case 176: 
        return PStoreTransaction.decode(readValue(buffer)!);
      case 177: 
        return PStoreProduct.decode(readValue(buffer)!);
      case 178: 
        return PPaywallOptions.decode(readValue(buffer)!);
      case 179: 
        return PPurchaseControllerHost.decode(readValue(buffer)!);
      case 180: 
        return PConfigureCompletionHost.decode(readValue(buffer)!);
      case 181: 
        return PPaywallPresentationHandlerHost.decode(readValue(buffer)!);
      case 182: 
        return PFeatureHandlerHost.decode(readValue(buffer)!);
      case 183: 
        return PEntitlement.decode(readValue(buffer)!);
      case 184: 
        return PEntitlements.decode(readValue(buffer)!);
      case 185: 
        return PActive.decode(readValue(buffer)!);
      case 186: 
        return PInactive.decode(readValue(buffer)!);
      case 187: 
        return PUnknown.decode(readValue(buffer)!);
      case 188: 
        return PSuperwallEventInfo.decode(readValue(buffer)!);
      case 189: 
        return PStatusReasonDebuggerPresented.decode(readValue(buffer)!);
      case 190: 
        return PStatusReasonPaywallAlreadyPresented.decode(readValue(buffer)!);
      case 191: 
        return PStatusReasonHoldout.decode(readValue(buffer)!);
      case 192: 
        return PStatusReasonNoAudienceMatch.decode(readValue(buffer)!);
      case 193: 
        return PStatusReasonPlacementNotFound.decode(readValue(buffer)!);
      case 194: 
        return PStatusReasonNoPaywallVc.decode(readValue(buffer)!);
      case 195: 
        return PStatusReasonNoPresenter.decode(readValue(buffer)!);
      case 196: 
        return PStatusReasonNoConfig.decode(readValue(buffer)!);
      case 197: 
        return PStatusReasonSubsStatusTimeout.decode(readValue(buffer)!);
      case 198: 
        return PIdentityOptions.decode(readValue(buffer)!);
      case 199: 
        return PExperiment.decode(readValue(buffer)!);
      case 200: 
        return PPlacementNotFoundTriggerResult.decode(readValue(buffer)!);
      case 201: 
        return PNoAudienceMatchTriggerResult.decode(readValue(buffer)!);
      case 202: 
        return PPaywallTriggerResult.decode(readValue(buffer)!);
      case 203: 
        return PHoldoutTriggerResult.decode(readValue(buffer)!);
      case 204: 
        return PErrorTriggerResult.decode(readValue(buffer)!);
      case 205: 
        return PVariant.decode(readValue(buffer)!);
      case 206: 
        return PConfirmedAssignment.decode(readValue(buffer)!);
      case 207: 
        return PPurchasedPaywallResult.decode(readValue(buffer)!);
      case 208: 
        return PDeclinedPaywallResult.decode(readValue(buffer)!);
      case 209: 
        return PRestoredPaywallResult.decode(readValue(buffer)!);
      case 210: 
        return PPlacementNotFoundPresentationResult.decode(readValue(buffer)!);
      case 211: 
        return PNoAudienceMatchPresentationResult.decode(readValue(buffer)!);
      case 212: 
        return PPaywallPresentationResult.decode(readValue(buffer)!);
      case 213: 
        return PHoldoutPresentationResult.decode(readValue(buffer)!);
      case 214: 
        return PPaywallNotAvailablePresentationResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

class PSuperwallHostApi {
  /// Constructor for [PSuperwallHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PSuperwallHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> configure(String apiKey, {PPurchaseControllerHost? purchaseController, PSuperwallOptions? options, PConfigureCompletionHost? completion, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.configure$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[apiKey, purchaseController, options, completion]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reset() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.reset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDelegate(bool hasDelegate) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setDelegate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[hasDelegate]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PConfirmedAssignment>> confirmAllAssignments() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.confirmAllAssignments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PConfirmedAssignment>();
    }
  }

  Future<PRestorationResult> restorePurchases() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.restorePurchases$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PRestorationResult?)!;
    }
  }

  Future<String> getLogLevel() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLogLevel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> setLogLevel(String logLevel) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLogLevel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[logLevel]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String, Object>> getUserAttributes() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String, Object>();
    }
  }

  Future<void> setUserAttributes(Map<String, Object> userAttributes) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userAttributes]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String, Object>> getDeviceAttributes() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getDeviceAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String, Object>();
    }
  }

  Future<String> consume(String purchaseToken) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.consume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[purchaseToken]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String?> getLocaleIdentifier() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLocaleIdentifier$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<void> setLocaleIdentifier(String? localeIdentifier) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLocaleIdentifier$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[localeIdentifier]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> getUserId() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<bool> getIsLoggedIn() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsLoggedIn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> getIsInitialized() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsInitialized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> identify(String userId, PIdentityOptions? identityOptions) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.identify$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId, identityOptions]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PEntitlements> getEntitlements() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getEntitlements$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PEntitlements?)!;
    }
  }

  Future<PSubscriptionStatus> getSubscriptionStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getSubscriptionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PSubscriptionStatus?)!;
    }
  }

  Future<void> setSubscriptionStatus(PSubscriptionStatus subscriptionStatus) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setSubscriptionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[subscriptionStatus]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PConfigurationStatus> getConfigurationStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getConfigurationStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PConfigurationStatus?)!;
    }
  }

  Future<bool> getIsConfigured() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsConfigured$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<PPresentationResult> getPresentationResult(String placement, Map<String, Object>? params) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getPresentationResult$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[placement, params]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PPresentationResult?)!;
    }
  }

  Future<bool> getIsPaywallPresented() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsPaywallPresented$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> preloadAllPaywalls() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadAllPaywalls$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> preloadPaywallsForPlacements(List<String> placementNames) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadPaywallsForPlacements$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[placementNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> handleDeepLink(String url) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.handleDeepLink$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[url]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> togglePaywallSpinner(bool isHidden) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.togglePaywallSpinner$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[isHidden]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PPaywallInfo?> getLatestPaywallInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLatestPaywallInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PPaywallInfo?);
    }
  }

  Future<void> registerPlacement(String placement, {Map<String, Object>? params, PPaywallPresentationHandlerHost? handler, PFeatureHandlerHost? feature, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.registerPlacement$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[placement, params, handler, feature]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dismiss() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.dismiss$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String, String>?> getOverrideProductsByName() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getOverrideProductsByName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String, String>();
    }
  }

  Future<void> setOverrideProductsByName(Map<String, String>? overrideProducts) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setOverrideProductsByName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[overrideProducts]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PSuperwallDelegateGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void subscriptionStatusDidChange(PSubscriptionStatus from, PSubscriptionStatus to);

  void handleSuperwallEvent(PSuperwallEventInfo eventInfo);

  void handleCustomPaywallAction(String name);

  void willDismissPaywall(PPaywallInfo paywallInfo);

  void willPresentPaywall(PPaywallInfo paywallInfo);

  void didDismissPaywall(PPaywallInfo paywallInfo);

  void didPresentPaywall(PPaywallInfo paywallInfo);

  void paywallWillOpenURL(String url);

  void paywallWillOpenDeepLink(String url);

  void handleLog(String level, String scope, String? message, Map<String, Object>? info, String? error);

  void willRedeemLink();

  void didRedeemLink(PRedemptionResult result);

  void handleSuperwallDeepLink(String fullURL, List<String> pathComponents, Map<String, String> queryParameters);

  static void setUp(PSuperwallDelegateGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PSubscriptionStatus? arg_from = (args[0] as PSubscriptionStatus?);
          assert(arg_from != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null, expected non-null PSubscriptionStatus.');
          final PSubscriptionStatus? arg_to = (args[1] as PSubscriptionStatus?);
          assert(arg_to != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null, expected non-null PSubscriptionStatus.');
          try {
            api.subscriptionStatusDidChange(arg_from!, arg_to!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PSuperwallEventInfo? arg_eventInfo = (args[0] as PSuperwallEventInfo?);
          assert(arg_eventInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent was null, expected non-null PSuperwallEventInfo.');
          try {
            api.handleSuperwallEvent(arg_eventInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_name = (args[0] as String?);
          assert(arg_name != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction was null, expected non-null String.');
          try {
            api.handleCustomPaywallAction(arg_name!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.willDismissPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.willPresentPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.didDismissPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.didPresentPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL was null, expected non-null String.');
          try {
            api.paywallWillOpenURL(arg_url!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink was null, expected non-null String.');
          try {
            api.paywallWillOpenDeepLink(arg_url!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_level = (args[0] as String?);
          assert(arg_level != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null, expected non-null String.');
          final String? arg_scope = (args[1] as String?);
          assert(arg_scope != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null, expected non-null String.');
          final String? arg_message = (args[2] as String?);
          final Map<String, Object>? arg_info = (args[3] as Map<Object?, Object?>?)?.cast<String, Object>();
          final String? arg_error = (args[4] as String?);
          try {
            api.handleLog(arg_level!, arg_scope!, arg_message, arg_info, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willRedeemLink$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.willRedeemLink();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didRedeemLink$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didRedeemLink was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PRedemptionResult? arg_result = (args[0] as PRedemptionResult?);
          assert(arg_result != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didRedeemLink was null, expected non-null PRedemptionResult.');
          try {
            api.didRedeemLink(arg_result!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_fullURL = (args[0] as String?);
          assert(arg_fullURL != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink was null, expected non-null String.');
          final List<String>? arg_pathComponents = (args[1] as List<Object?>?)?.cast<String>();
          assert(arg_pathComponents != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink was null, expected non-null List<String>.');
          final Map<String, String>? arg_queryParameters = (args[2] as Map<Object?, Object?>?)?.cast<String, String>();
          assert(arg_queryParameters != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink was null, expected non-null Map<String, String>.');
          try {
            api.handleSuperwallDeepLink(arg_fullURL!, arg_pathComponents!, arg_queryParameters!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PPurchaseControllerGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<PPurchaseResult> purchaseFromAppStore(String productId);

  Future<PPurchaseResult> purchaseFromGooglePlay(String productId, String? basePlanId, String? offerId);

  Future<PRestorationResult> restorePurchases();

  static void setUp(PPurchaseControllerGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_productId = (args[0] as String?);
          assert(arg_productId != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore was null, expected non-null String.');
          try {
            final PPurchaseResult output = await api.purchaseFromAppStore(arg_productId!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_productId = (args[0] as String?);
          assert(arg_productId != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay was null, expected non-null String.');
          final String? arg_basePlanId = (args[1] as String?);
          final String? arg_offerId = (args[2] as String?);
          try {
            final PPurchaseResult output = await api.purchaseFromGooglePlay(arg_productId!, arg_basePlanId, arg_offerId);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.restorePurchases$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final PRestorationResult output = await api.restorePurchases();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PConfigureCompletionGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onConfigureCompleted(bool success);

  static void setUp(PConfigureCompletionGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_success = (args[0] as bool?);
          assert(arg_success != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted was null, expected non-null bool.');
          try {
            api.onConfigureCompleted(arg_success!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PPaywallPresentationHandlerGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onPresent(PPaywallInfo paywallInfo);

  void onDismiss(PPaywallInfo paywallInfo, PPaywallResult paywallResult);

  void onError(String error);

  void onSkip(PPaywallSkippedReason reason);

  static void setUp(PPaywallPresentationHandlerGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent was null, expected non-null PPaywallInfo.');
          try {
            api.onPresent(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss was null, expected non-null PPaywallInfo.');
          final PPaywallResult? arg_paywallResult = (args[1] as PPaywallResult?);
          assert(arg_paywallResult != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss was null, expected non-null PPaywallResult.');
          try {
            api.onDismiss(arg_paywallInfo!, arg_paywallResult!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError was null, expected non-null String.');
          try {
            api.onError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallSkippedReason? arg_reason = (args[0] as PPaywallSkippedReason?);
          assert(arg_reason != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip was null, expected non-null PPaywallSkippedReason.');
          try {
            api.onSkip(arg_reason!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PFeatureHandlerGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onFeature(String id);

  static void setUp(PFeatureHandlerGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature was null, expected non-null String.');
          try {
            api.onFeature(arg_id!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

Stream<PSubscriptionStatus> streamSubscriptionStatus( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel streamSubscriptionStatusChannel =
      EventChannel('dev.flutter.pigeon.superwallkit_flutter.SubscriptionStatusStream.streamSubscriptionStatus$instanceName', pigeonMethodCodec);
  return streamSubscriptionStatusChannel.receiveBroadcastStream().map((dynamic event) {
    return event as PSubscriptionStatus;
  });
}
    
