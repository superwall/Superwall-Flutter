// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsSuperwallHostGenerated(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsSuperwallHostGenerated(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsSuperwallHostGenerated(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashSuperwallHostGenerated(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashSuperwallHostGenerated(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashSuperwallHostGenerated(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum PFeatureGatingBehavior: Int {
  case gated = 0
  case nonGated = 1
}

enum PPaywallCloseReason: Int {
  /// The paywall was closed by system logic, either after a purchase, because
  /// a deeplink was presented, close button pressed, etc.
  case systemLogic = 0
  /// The paywall was automatically closed because another paywall will show.
  ///
  /// This prevents ``Superwall/register(placement:params:handler:feature:)`` `feature`
  /// block from executing on dismiss of the paywall, because another paywall is set to show
  case forNextPaywall = 1
  /// The paywall was closed because the webview couldn't be loaded.
  ///
  /// If this happens for a gated paywall, the ``PaywallPresentationHandler/onError(_:)``
  /// handler will be called. If it's for a non-gated paywall, the feature block will be called.
  case webViewFailedToLoad = 2
  /// The paywall was closed because the user tapped the close button or dragged to dismiss.
  case manualClose = 3
  /// The paywall hasn't been closed yet.
  case none = 4
}

enum PLocalNotificationType: Int {
  case trialStarted = 0
  case unsupported = 1
}

enum PComputedPropertyRequestType: Int {
  case minutesSince = 0
  case hoursSince = 1
  case daysSince = 2
  case monthsSince = 3
  case yearsSince = 4
  case placementsInHour = 5
  case placementsInDay = 6
  case placementsInWeek = 7
  case placementsInMonth = 8
  case placementsSinceInstall = 9
}

enum PSurveyShowCondition: Int {
  case onManualClose = 0
  case onPurchase = 1
}

enum PNetworkEnvironment: Int {
  case release = 0
  case releaseCandidate = 1
  case developer = 2
}

enum PLogLevel: Int {
  case debug = 0
  case info = 1
  case warn = 2
  case error = 3
  case none = 4
}

enum PTransactionBackgroundView: Int {
  case spinner = 0
  case none = 1
}

enum PLogScope: Int {
  case localizationManager = 0
  case bounceButton = 1
  case coreData = 2
  case configManager = 3
  case identityManager = 4
  case debugManager = 5
  case debugViewController = 6
  case localizationViewController = 7
  case gameControllerManager = 8
  case device = 9
  case network = 10
  case paywallEvents = 11
  case productsManager = 12
  case storeKitManager = 13
  case placements = 14
  case receipts = 15
  case superwallCore = 16
  case paywallPresentation = 17
  case transactions = 18
  case paywallViewController = 19
  case cache = 20
  case all = 21
}

enum PConfigurationStatus: Int {
  case pending = 0
  case configured = 1
  case failed = 2
}

enum PEventType: Int {
  case firstSeen = 0
  case appOpen = 1
  case appLaunch = 2
  case identityAlias = 3
  case appInstall = 4
  case restoreStart = 5
  case restoreComplete = 6
  case restoreFail = 7
  case sessionStart = 8
  case deviceAttributes = 9
  case subscriptionStatusDidChange = 10
  case appClose = 11
  case deepLink = 12
  case triggerFire = 13
  case paywallOpen = 14
  case paywallClose = 15
  case paywallDecline = 16
  case transactionStart = 17
  case transactionFail = 18
  case transactionAbandon = 19
  case transactionComplete = 20
  case subscriptionStart = 21
  case freeTrialStart = 22
  case transactionRestore = 23
  case transactionTimeout = 24
  case userAttributes = 25
  case nonRecurringProductPurchase = 26
  case paywallResponseLoadStart = 27
  case paywallResponseLoadNotFound = 28
  case paywallResponseLoadFail = 29
  case paywallResponseLoadComplete = 30
  case paywallWebviewLoadStart = 31
  case paywallWebviewLoadFail = 32
  case paywallWebviewLoadComplete = 33
  case paywallWebviewLoadTimeout = 34
  case paywallWebviewLoadFallback = 35
  case paywallProductsLoadRetry = 36
  case paywallProductsLoadStart = 37
  case paywallProductsLoadFail = 38
  case paywallProductsLoadComplete = 39
  case paywallResourceLoadFail = 40
  case surveyResponse = 41
  case paywallPresentationRequest = 42
  case touchesBegan = 43
  case surveyClose = 44
  case reset = 45
  case configRefresh = 46
  case customPlacement = 47
  case configAttributes = 48
  case confirmAllAssignments = 49
  case configFail = 50
  case adServicesTokenRequestStart = 51
  case adServicesTokenRequestFail = 52
  case adServicesTokenRequestComplete = 53
  case shimmerViewStart = 54
  case shimmerViewComplete = 55
  case redemptionStart = 56
  case redemptionComplete = 57
  case redemptionFail = 58
  case enrichmentStart = 59
  case enrichmentComplete = 60
  case enrichmentFail = 61
  case networkDecodingFail = 62
}

enum PSubscriptionStatusType: Int {
  case active = 0
  case inactive = 1
  case unknown = 2
}

enum PPaywallPresentationRequestStatusType: Int {
  case presentation = 0
  case noPresentation = 1
  case timeout = 2
}

enum PVariantType: Int {
  case treatment = 0
  case holdout = 1
}

enum PPaywallSkippedReason: Int {
  case holdout = 0
  case noAudienceMatch = 1
  case placementNotFound = 2
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PRedemptionResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PSuccessRedemptionResult: PRedemptionResult {
  var code: String
  var redemptionInfo: PRedemptionInfo


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSuccessRedemptionResult? {
    let code = pigeonVar_list[0] as! String
    let redemptionInfo = pigeonVar_list[1] as! PRedemptionInfo

    return PSuccessRedemptionResult(
      code: code,
      redemptionInfo: redemptionInfo
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      redemptionInfo,
    ]
  }
  static func == (lhs: PSuccessRedemptionResult, rhs: PSuccessRedemptionResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PErrorRedemptionResult: PRedemptionResult {
  var code: String
  var error: PErrorInfo


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PErrorRedemptionResult? {
    let code = pigeonVar_list[0] as! String
    let error = pigeonVar_list[1] as! PErrorInfo

    return PErrorRedemptionResult(
      code: code,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      error,
    ]
  }
  static func == (lhs: PErrorRedemptionResult, rhs: PErrorRedemptionResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PErrorInfo: Hashable {
  var message: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PErrorInfo? {
    let message = pigeonVar_list[0] as! String

    return PErrorInfo(
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      message
    ]
  }
  static func == (lhs: PErrorInfo, rhs: PErrorInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PExpiredCodeRedemptionResult: PRedemptionResult {
  var code: String
  var info: PExpiredCodeInfo


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PExpiredCodeRedemptionResult? {
    let code = pigeonVar_list[0] as! String
    let info = pigeonVar_list[1] as! PExpiredCodeInfo

    return PExpiredCodeRedemptionResult(
      code: code,
      info: info
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      info,
    ]
  }
  static func == (lhs: PExpiredCodeRedemptionResult, rhs: PExpiredCodeRedemptionResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Info about the expired code.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PExpiredCodeInfo: Hashable {
  /// A boolean indicating whether the redemption email has been resent.
  var resent: Bool
  /// An optional String indicating the obfuscated email address that the
  /// redemption email was sent to.
  var obfuscatedEmail: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PExpiredCodeInfo? {
    let resent = pigeonVar_list[0] as! Bool
    let obfuscatedEmail: String? = nilOrValue(pigeonVar_list[1])

    return PExpiredCodeInfo(
      resent: resent,
      obfuscatedEmail: obfuscatedEmail
    )
  }
  func toList() -> [Any?] {
    return [
      resent,
      obfuscatedEmail,
    ]
  }
  static func == (lhs: PExpiredCodeInfo, rhs: PExpiredCodeInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PInvalidCodeRedemptionResult: PRedemptionResult {
  var code: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PInvalidCodeRedemptionResult? {
    let code = pigeonVar_list[0] as! String

    return PInvalidCodeRedemptionResult(
      code: code
    )
  }
  func toList() -> [Any?] {
    return [
      code
    ]
  }
  static func == (lhs: PInvalidCodeRedemptionResult, rhs: PInvalidCodeRedemptionResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PExpiredSubscriptionCode: PRedemptionResult {
  var code: String
  var redemptionInfo: PRedemptionInfo


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PExpiredSubscriptionCode? {
    let code = pigeonVar_list[0] as! String
    let redemptionInfo = pigeonVar_list[1] as! PRedemptionInfo

    return PExpiredSubscriptionCode(
      code: code,
      redemptionInfo: redemptionInfo
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      redemptionInfo,
    ]
  }
  static func == (lhs: PExpiredSubscriptionCode, rhs: PExpiredSubscriptionCode) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Information about the redemption.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PRedemptionInfo: Hashable {
  /// The ownership of the code.
  var ownership: POwnership
  /// Info about the purchaser.
  var purchaserInfo: PPurchaserInfo
  /// Info about the paywall the purchase was made from.
  var paywallInfo: PRedemptionPaywallInfo? = nil
  /// The entitlements array.
  var entitlements: [PEntitlement]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRedemptionInfo? {
    let ownership = pigeonVar_list[0] as! POwnership
    let purchaserInfo = pigeonVar_list[1] as! PPurchaserInfo
    let paywallInfo: PRedemptionPaywallInfo? = nilOrValue(pigeonVar_list[2])
    let entitlements = pigeonVar_list[3] as! [PEntitlement]

    return PRedemptionInfo(
      ownership: ownership,
      purchaserInfo: purchaserInfo,
      paywallInfo: paywallInfo,
      entitlements: entitlements
    )
  }
  func toList() -> [Any?] {
    return [
      ownership,
      purchaserInfo,
      paywallInfo,
      entitlements,
    ]
  }
  static func == (lhs: PRedemptionInfo, rhs: PRedemptionInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Enum specifying code ownership.
///
/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol POwnership {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PAppUserOwnership: POwnership {
  var appUserId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PAppUserOwnership? {
    let appUserId = pigeonVar_list[0] as! String

    return PAppUserOwnership(
      appUserId: appUserId
    )
  }
  func toList() -> [Any?] {
    return [
      appUserId
    ]
  }
  static func == (lhs: PAppUserOwnership, rhs: PAppUserOwnership) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PDeviceOwnership: POwnership {
  var deviceId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PDeviceOwnership? {
    let deviceId = pigeonVar_list[0] as! String

    return PDeviceOwnership(
      deviceId: deviceId
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId
    ]
  }
  static func == (lhs: PDeviceOwnership, rhs: PDeviceOwnership) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Info about the purchaser.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaserInfo: Hashable {
  /// The app user ID of the purchaser.
  var appUserId: String
  /// The email address of the purchaser.
  var email: String? = nil
  /// The identifiers of the store that was purchased from.
  var storeIdentifiers: PStoreIdentifiers


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaserInfo? {
    let appUserId = pigeonVar_list[0] as! String
    let email: String? = nilOrValue(pigeonVar_list[1])
    let storeIdentifiers = pigeonVar_list[2] as! PStoreIdentifiers

    return PPurchaserInfo(
      appUserId: appUserId,
      email: email,
      storeIdentifiers: storeIdentifiers
    )
  }
  func toList() -> [Any?] {
    return [
      appUserId,
      email,
      storeIdentifiers,
    ]
  }
  static func == (lhs: PPurchaserInfo, rhs: PPurchaserInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Identifiers of the store that was purchased from.
///
/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PStoreIdentifiers {

}

/// Stripe purchase store identifiers.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PStripeStoreIdentifiers: PStoreIdentifiers {
  var customerId: String
  var subscriptionIds: [String]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStripeStoreIdentifiers? {
    let customerId = pigeonVar_list[0] as! String
    let subscriptionIds = pigeonVar_list[1] as! [String]

    return PStripeStoreIdentifiers(
      customerId: customerId,
      subscriptionIds: subscriptionIds
    )
  }
  func toList() -> [Any?] {
    return [
      customerId,
      subscriptionIds,
    ]
  }
  static func == (lhs: PStripeStoreIdentifiers, rhs: PStripeStoreIdentifiers) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Stripe purchase store identifiers.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PPaddleStoreIdentifiers: PStoreIdentifiers {
  var customerId: String
  var subscriptionIds: [String]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaddleStoreIdentifiers? {
    let customerId = pigeonVar_list[0] as! String
    let subscriptionIds = pigeonVar_list[1] as! [String]

    return PPaddleStoreIdentifiers(
      customerId: customerId,
      subscriptionIds: subscriptionIds
    )
  }
  func toList() -> [Any?] {
    return [
      customerId,
      subscriptionIds,
    ]
  }
  static func == (lhs: PPaddleStoreIdentifiers, rhs: PPaddleStoreIdentifiers) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Unknown purchase store identifiers.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PUnknownStoreIdentifiers: PStoreIdentifiers {
  var store: String
  var additionalInfo: [String: Any]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PUnknownStoreIdentifiers? {
    let store = pigeonVar_list[0] as! String
    let additionalInfo = pigeonVar_list[1] as! [String: Any]

    return PUnknownStoreIdentifiers(
      store: store,
      additionalInfo: additionalInfo
    )
  }
  func toList() -> [Any?] {
    return [
      store,
      additionalInfo,
    ]
  }
  static func == (lhs: PUnknownStoreIdentifiers, rhs: PUnknownStoreIdentifiers) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Info about the paywall the purchase was made from.
///
/// Generated class from Pigeon that represents data sent in messages.
struct PRedemptionPaywallInfo: Hashable {
  /// The identifier of the paywall.
  var identifier: String
  /// The name of the placement.
  var placementName: String
  /// The params of the placement.
  var placementParams: [String: Any]
  /// The ID of the paywall variant.
  var variantId: String
  /// The ID of the experiment that the paywall belongs to.
  var experimentId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRedemptionPaywallInfo? {
    let identifier = pigeonVar_list[0] as! String
    let placementName = pigeonVar_list[1] as! String
    let placementParams = pigeonVar_list[2] as! [String: Any]
    let variantId = pigeonVar_list[3] as! String
    let experimentId = pigeonVar_list[4] as! String

    return PRedemptionPaywallInfo(
      identifier: identifier,
      placementName: placementName,
      placementParams: placementParams,
      variantId: variantId,
      experimentId: experimentId
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      placementName,
      placementParams,
      variantId,
      experimentId,
    ]
  }
  static func == (lhs: PRedemptionPaywallInfo, rhs: PRedemptionPaywallInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSuperwallOptions: Hashable {
  var paywalls: PPaywallOptions? = nil
  var networkEnvironment: PNetworkEnvironment? = nil
  var isExternalDataCollectionEnabled: Bool? = nil
  var localeIdentifier: String? = nil
  var isGameControllerEnabled: Bool? = nil
  var enableExperimentalDeviceVariables: Bool? = nil
  var logging: PLogging? = nil
  var passIdentifiersToPlayStore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSuperwallOptions? {
    let paywalls: PPaywallOptions? = nilOrValue(pigeonVar_list[0])
    let networkEnvironment: PNetworkEnvironment? = nilOrValue(pigeonVar_list[1])
    let isExternalDataCollectionEnabled: Bool? = nilOrValue(pigeonVar_list[2])
    let localeIdentifier: String? = nilOrValue(pigeonVar_list[3])
    let isGameControllerEnabled: Bool? = nilOrValue(pigeonVar_list[4])
    let enableExperimentalDeviceVariables: Bool? = nilOrValue(pigeonVar_list[5])
    let logging: PLogging? = nilOrValue(pigeonVar_list[6])
    let passIdentifiersToPlayStore: Bool? = nilOrValue(pigeonVar_list[7])

    return PSuperwallOptions(
      paywalls: paywalls,
      networkEnvironment: networkEnvironment,
      isExternalDataCollectionEnabled: isExternalDataCollectionEnabled,
      localeIdentifier: localeIdentifier,
      isGameControllerEnabled: isGameControllerEnabled,
      enableExperimentalDeviceVariables: enableExperimentalDeviceVariables,
      logging: logging,
      passIdentifiersToPlayStore: passIdentifiersToPlayStore
    )
  }
  func toList() -> [Any?] {
    return [
      paywalls,
      networkEnvironment,
      isExternalDataCollectionEnabled,
      localeIdentifier,
      isGameControllerEnabled,
      enableExperimentalDeviceVariables,
      logging,
      passIdentifiersToPlayStore,
    ]
  }
  static func == (lhs: PSuperwallOptions, rhs: PSuperwallOptions) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallInfo: Hashable {
  var identifier: String? = nil
  var name: String? = nil
  var experiment: PExperiment? = nil
  var productIds: [String]? = nil
  var products: [PProduct]? = nil
  var url: String? = nil
  var presentedByPlacementWithName: String? = nil
  var presentedByPlacementWithId: String? = nil
  var presentedByPlacementAt: String? = nil
  var presentedBy: String? = nil
  var presentationSourceType: String? = nil
  var responseLoadStartTime: String? = nil
  var responseLoadCompleteTime: String? = nil
  var responseLoadFailTime: String? = nil
  var responseLoadDuration: Double? = nil
  var webViewLoadStartTime: String? = nil
  var webViewLoadCompleteTime: String? = nil
  var webViewLoadFailTime: String? = nil
  var webViewLoadDuration: Double? = nil
  var productsLoadStartTime: String? = nil
  var productsLoadCompleteTime: String? = nil
  var productsLoadFailTime: String? = nil
  var productsLoadDuration: Double? = nil
  var paywalljsVersion: String? = nil
  var isFreeTrialAvailable: Bool? = nil
  var featureGatingBehavior: PFeatureGatingBehavior? = nil
  var closeReason: PPaywallCloseReason? = nil
  var localNotifications: [PLocalNotification]? = nil
  var computedPropertyRequests: [PComputedPropertyRequest]? = nil
  var surveys: [PSurvey]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallInfo? {
    let identifier: String? = nilOrValue(pigeonVar_list[0])
    let name: String? = nilOrValue(pigeonVar_list[1])
    let experiment: PExperiment? = nilOrValue(pigeonVar_list[2])
    let productIds: [String]? = nilOrValue(pigeonVar_list[3])
    let products: [PProduct]? = nilOrValue(pigeonVar_list[4])
    let url: String? = nilOrValue(pigeonVar_list[5])
    let presentedByPlacementWithName: String? = nilOrValue(pigeonVar_list[6])
    let presentedByPlacementWithId: String? = nilOrValue(pigeonVar_list[7])
    let presentedByPlacementAt: String? = nilOrValue(pigeonVar_list[8])
    let presentedBy: String? = nilOrValue(pigeonVar_list[9])
    let presentationSourceType: String? = nilOrValue(pigeonVar_list[10])
    let responseLoadStartTime: String? = nilOrValue(pigeonVar_list[11])
    let responseLoadCompleteTime: String? = nilOrValue(pigeonVar_list[12])
    let responseLoadFailTime: String? = nilOrValue(pigeonVar_list[13])
    let responseLoadDuration: Double? = nilOrValue(pigeonVar_list[14])
    let webViewLoadStartTime: String? = nilOrValue(pigeonVar_list[15])
    let webViewLoadCompleteTime: String? = nilOrValue(pigeonVar_list[16])
    let webViewLoadFailTime: String? = nilOrValue(pigeonVar_list[17])
    let webViewLoadDuration: Double? = nilOrValue(pigeonVar_list[18])
    let productsLoadStartTime: String? = nilOrValue(pigeonVar_list[19])
    let productsLoadCompleteTime: String? = nilOrValue(pigeonVar_list[20])
    let productsLoadFailTime: String? = nilOrValue(pigeonVar_list[21])
    let productsLoadDuration: Double? = nilOrValue(pigeonVar_list[22])
    let paywalljsVersion: String? = nilOrValue(pigeonVar_list[23])
    let isFreeTrialAvailable: Bool? = nilOrValue(pigeonVar_list[24])
    let featureGatingBehavior: PFeatureGatingBehavior? = nilOrValue(pigeonVar_list[25])
    let closeReason: PPaywallCloseReason? = nilOrValue(pigeonVar_list[26])
    let localNotifications: [PLocalNotification]? = nilOrValue(pigeonVar_list[27])
    let computedPropertyRequests: [PComputedPropertyRequest]? = nilOrValue(pigeonVar_list[28])
    let surveys: [PSurvey]? = nilOrValue(pigeonVar_list[29])

    return PPaywallInfo(
      identifier: identifier,
      name: name,
      experiment: experiment,
      productIds: productIds,
      products: products,
      url: url,
      presentedByPlacementWithName: presentedByPlacementWithName,
      presentedByPlacementWithId: presentedByPlacementWithId,
      presentedByPlacementAt: presentedByPlacementAt,
      presentedBy: presentedBy,
      presentationSourceType: presentationSourceType,
      responseLoadStartTime: responseLoadStartTime,
      responseLoadCompleteTime: responseLoadCompleteTime,
      responseLoadFailTime: responseLoadFailTime,
      responseLoadDuration: responseLoadDuration,
      webViewLoadStartTime: webViewLoadStartTime,
      webViewLoadCompleteTime: webViewLoadCompleteTime,
      webViewLoadFailTime: webViewLoadFailTime,
      webViewLoadDuration: webViewLoadDuration,
      productsLoadStartTime: productsLoadStartTime,
      productsLoadCompleteTime: productsLoadCompleteTime,
      productsLoadFailTime: productsLoadFailTime,
      productsLoadDuration: productsLoadDuration,
      paywalljsVersion: paywalljsVersion,
      isFreeTrialAvailable: isFreeTrialAvailable,
      featureGatingBehavior: featureGatingBehavior,
      closeReason: closeReason,
      localNotifications: localNotifications,
      computedPropertyRequests: computedPropertyRequests,
      surveys: surveys
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      name,
      experiment,
      productIds,
      products,
      url,
      presentedByPlacementWithName,
      presentedByPlacementWithId,
      presentedByPlacementAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    ]
  }
  static func == (lhs: PPaywallInfo, rhs: PPaywallInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PProduct: Hashable {
  var id: String? = nil
  var name: String? = nil
  var entitlements: [PEntitlement]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PProduct? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let name: String? = nilOrValue(pigeonVar_list[1])
    let entitlements: [PEntitlement]? = nilOrValue(pigeonVar_list[2])

    return PProduct(
      id: id,
      name: name,
      entitlements: entitlements
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      entitlements,
    ]
  }
  static func == (lhs: PProduct, rhs: PProduct) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PLocalNotification: Hashable {
  var id: Int64
  var type: PLocalNotificationType
  var title: String
  var subtitle: String? = nil
  var body: String
  var delay: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PLocalNotification? {
    let id = pigeonVar_list[0] as! Int64
    let type = pigeonVar_list[1] as! PLocalNotificationType
    let title = pigeonVar_list[2] as! String
    let subtitle: String? = nilOrValue(pigeonVar_list[3])
    let body = pigeonVar_list[4] as! String
    let delay = pigeonVar_list[5] as! Int64

    return PLocalNotification(
      id: id,
      type: type,
      title: title,
      subtitle: subtitle,
      body: body,
      delay: delay
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      type,
      title,
      subtitle,
      body,
      delay,
    ]
  }
  static func == (lhs: PLocalNotification, rhs: PLocalNotification) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PComputedPropertyRequest: Hashable {
  var type: PComputedPropertyRequestType
  var eventName: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PComputedPropertyRequest? {
    let type = pigeonVar_list[0] as! PComputedPropertyRequestType
    let eventName = pigeonVar_list[1] as! String

    return PComputedPropertyRequest(
      type: type,
      eventName: eventName
    )
  }
  func toList() -> [Any?] {
    return [
      type,
      eventName,
    ]
  }
  static func == (lhs: PComputedPropertyRequest, rhs: PComputedPropertyRequest) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSurvey: Hashable {
  var id: String
  var assignmentKey: String
  var title: String
  var message: String
  var options: [PSurveyOption]
  var presentationCondition: PSurveyShowCondition
  var presentationProbability: Double
  var includeOtherOption: Bool
  var includeCloseOption: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSurvey? {
    let id = pigeonVar_list[0] as! String
    let assignmentKey = pigeonVar_list[1] as! String
    let title = pigeonVar_list[2] as! String
    let message = pigeonVar_list[3] as! String
    let options = pigeonVar_list[4] as! [PSurveyOption]
    let presentationCondition = pigeonVar_list[5] as! PSurveyShowCondition
    let presentationProbability = pigeonVar_list[6] as! Double
    let includeOtherOption = pigeonVar_list[7] as! Bool
    let includeCloseOption = pigeonVar_list[8] as! Bool

    return PSurvey(
      id: id,
      assignmentKey: assignmentKey,
      title: title,
      message: message,
      options: options,
      presentationCondition: presentationCondition,
      presentationProbability: presentationProbability,
      includeOtherOption: includeOtherOption,
      includeCloseOption: includeCloseOption
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      assignmentKey,
      title,
      message,
      options,
      presentationCondition,
      presentationProbability,
      includeOtherOption,
      includeCloseOption,
    ]
  }
  static func == (lhs: PSurvey, rhs: PSurvey) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSurveyOption: Hashable {
  var id: String? = nil
  var text: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSurveyOption? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let text: String? = nilOrValue(pigeonVar_list[1])

    return PSurveyOption(
      id: id,
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      text,
    ]
  }
  static func == (lhs: PSurveyOption, rhs: PSurveyOption) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPurchaseResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseCancelled: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseCancelled? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchaseCancelled(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPurchaseCancelled, rhs: PPurchaseCancelled) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasePurchased: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasePurchased? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchasePurchased(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPurchasePurchased, rhs: PPurchasePurchased) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasePending: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasePending? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchasePending(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPurchasePending, rhs: PPurchasePending) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseFailed: PPurchaseResult {
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseFailed? {
    let error: String? = nilOrValue(pigeonVar_list[0])

    return PPurchaseFailed(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
  static func == (lhs: PPurchaseFailed, rhs: PPurchaseFailed) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PRestorationResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestorationRestored: PRestorationResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestorationRestored? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PRestorationRestored(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PRestorationRestored, rhs: PRestorationRestored) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestorationFailed: PRestorationResult {
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestorationFailed? {
    let error: String? = nilOrValue(pigeonVar_list[0])

    return PRestorationFailed(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
  static func == (lhs: PRestorationFailed, rhs: PRestorationFailed) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PRestoreType {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PViaPurchase: PRestoreType {
  var storeTransaction: PStoreTransaction? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PViaPurchase? {
    let storeTransaction: PStoreTransaction? = nilOrValue(pigeonVar_list[0])

    return PViaPurchase(
      storeTransaction: storeTransaction
    )
  }
  func toList() -> [Any?] {
    return [
      storeTransaction
    ]
  }
  static func == (lhs: PViaPurchase, rhs: PViaPurchase) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PViaRestore: PRestoreType {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PViaRestore? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PViaRestore(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PViaRestore, rhs: PViaRestore) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestoreFailed: Hashable {
  var title: String? = nil
  var message: String? = nil
  var closeButtonTitle: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestoreFailed? {
    let title: String? = nilOrValue(pigeonVar_list[0])
    let message: String? = nilOrValue(pigeonVar_list[1])
    let closeButtonTitle: String? = nilOrValue(pigeonVar_list[2])

    return PRestoreFailed(
      title: title,
      message: message,
      closeButtonTitle: closeButtonTitle
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      message,
      closeButtonTitle,
    ]
  }
  static func == (lhs: PRestoreFailed, rhs: PRestoreFailed) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PLogging: Hashable {
  var level: PLogLevel? = nil
  var scopes: [PLogScope]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PLogging? {
    let level: PLogLevel? = nilOrValue(pigeonVar_list[0])
    let scopes: [PLogScope]? = nilOrValue(pigeonVar_list[1])

    return PLogging(
      level: level,
      scopes: scopes
    )
  }
  func toList() -> [Any?] {
    return [
      level,
      scopes,
    ]
  }
  static func == (lhs: PLogging, rhs: PLogging) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStoreTransaction: Hashable {
  var configRequestId: String
  var appSessionId: String
  var transactionDate: String? = nil
  var originalTransactionIdentifier: String
  var storeTransactionId: String? = nil
  var originalTransactionDate: String? = nil
  var webOrderLineItemID: String? = nil
  var appBundleId: String? = nil
  var subscriptionGroupId: String? = nil
  var isUpgraded: Bool? = nil
  var expirationDate: String? = nil
  var offerId: String? = nil
  var revocationDate: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStoreTransaction? {
    let configRequestId = pigeonVar_list[0] as! String
    let appSessionId = pigeonVar_list[1] as! String
    let transactionDate: String? = nilOrValue(pigeonVar_list[2])
    let originalTransactionIdentifier = pigeonVar_list[3] as! String
    let storeTransactionId: String? = nilOrValue(pigeonVar_list[4])
    let originalTransactionDate: String? = nilOrValue(pigeonVar_list[5])
    let webOrderLineItemID: String? = nilOrValue(pigeonVar_list[6])
    let appBundleId: String? = nilOrValue(pigeonVar_list[7])
    let subscriptionGroupId: String? = nilOrValue(pigeonVar_list[8])
    let isUpgraded: Bool? = nilOrValue(pigeonVar_list[9])
    let expirationDate: String? = nilOrValue(pigeonVar_list[10])
    let offerId: String? = nilOrValue(pigeonVar_list[11])
    let revocationDate: String? = nilOrValue(pigeonVar_list[12])

    return PStoreTransaction(
      configRequestId: configRequestId,
      appSessionId: appSessionId,
      transactionDate: transactionDate,
      originalTransactionIdentifier: originalTransactionIdentifier,
      storeTransactionId: storeTransactionId,
      originalTransactionDate: originalTransactionDate,
      webOrderLineItemID: webOrderLineItemID,
      appBundleId: appBundleId,
      subscriptionGroupId: subscriptionGroupId,
      isUpgraded: isUpgraded,
      expirationDate: expirationDate,
      offerId: offerId,
      revocationDate: revocationDate
    )
  }
  func toList() -> [Any?] {
    return [
      configRequestId,
      appSessionId,
      transactionDate,
      originalTransactionIdentifier,
      storeTransactionId,
      originalTransactionDate,
      webOrderLineItemID,
      appBundleId,
      subscriptionGroupId,
      isUpgraded,
      expirationDate,
      offerId,
      revocationDate,
    ]
  }
  static func == (lhs: PStoreTransaction, rhs: PStoreTransaction) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStoreProduct: Hashable {
  var entitlements: [PEntitlement]
  var productIdentifier: String
  var subscriptionGroupIdentifier: String? = nil
  var attributes: [String: String]
  var localizedPrice: String
  var localizedSubscriptionPeriod: String
  var period: String
  var periodly: String
  var periodWeeks: Int64
  var periodWeeksString: String
  var periodMonths: Int64
  var periodMonthsString: String
  var periodYears: Int64
  var periodYearsString: String
  var periodDays: Int64
  var periodDaysString: String
  var dailyPrice: String
  var weeklyPrice: String
  var monthlyPrice: String
  var yearlyPrice: String
  var hasFreeTrial: Bool
  var trialPeriodEndDate: String? = nil
  var trialPeriodEndDateString: String
  var localizedTrialPeriodPrice: String
  var trialPeriodPrice: Double
  var trialPeriodDays: Int64
  var trialPeriodDaysString: String
  var trialPeriodWeeks: Int64
  var trialPeriodWeeksString: String
  var trialPeriodMonths: Int64
  var trialPeriodMonthsString: String
  var trialPeriodYears: Int64
  var trialPeriodYearsString: String
  var trialPeriodText: String
  var locale: String
  var languageCode: String? = nil
  var currencySymbol: String? = nil
  var currencyCode: String? = nil
  var isFamilyShareable: Bool
  var regionCode: String? = nil
  var price: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStoreProduct? {
    let entitlements = pigeonVar_list[0] as! [PEntitlement]
    let productIdentifier = pigeonVar_list[1] as! String
    let subscriptionGroupIdentifier: String? = nilOrValue(pigeonVar_list[2])
    let attributes = pigeonVar_list[3] as! [String: String]
    let localizedPrice = pigeonVar_list[4] as! String
    let localizedSubscriptionPeriod = pigeonVar_list[5] as! String
    let period = pigeonVar_list[6] as! String
    let periodly = pigeonVar_list[7] as! String
    let periodWeeks = pigeonVar_list[8] as! Int64
    let periodWeeksString = pigeonVar_list[9] as! String
    let periodMonths = pigeonVar_list[10] as! Int64
    let periodMonthsString = pigeonVar_list[11] as! String
    let periodYears = pigeonVar_list[12] as! Int64
    let periodYearsString = pigeonVar_list[13] as! String
    let periodDays = pigeonVar_list[14] as! Int64
    let periodDaysString = pigeonVar_list[15] as! String
    let dailyPrice = pigeonVar_list[16] as! String
    let weeklyPrice = pigeonVar_list[17] as! String
    let monthlyPrice = pigeonVar_list[18] as! String
    let yearlyPrice = pigeonVar_list[19] as! String
    let hasFreeTrial = pigeonVar_list[20] as! Bool
    let trialPeriodEndDate: String? = nilOrValue(pigeonVar_list[21])
    let trialPeriodEndDateString = pigeonVar_list[22] as! String
    let localizedTrialPeriodPrice = pigeonVar_list[23] as! String
    let trialPeriodPrice = pigeonVar_list[24] as! Double
    let trialPeriodDays = pigeonVar_list[25] as! Int64
    let trialPeriodDaysString = pigeonVar_list[26] as! String
    let trialPeriodWeeks = pigeonVar_list[27] as! Int64
    let trialPeriodWeeksString = pigeonVar_list[28] as! String
    let trialPeriodMonths = pigeonVar_list[29] as! Int64
    let trialPeriodMonthsString = pigeonVar_list[30] as! String
    let trialPeriodYears = pigeonVar_list[31] as! Int64
    let trialPeriodYearsString = pigeonVar_list[32] as! String
    let trialPeriodText = pigeonVar_list[33] as! String
    let locale = pigeonVar_list[34] as! String
    let languageCode: String? = nilOrValue(pigeonVar_list[35])
    let currencySymbol: String? = nilOrValue(pigeonVar_list[36])
    let currencyCode: String? = nilOrValue(pigeonVar_list[37])
    let isFamilyShareable = pigeonVar_list[38] as! Bool
    let regionCode: String? = nilOrValue(pigeonVar_list[39])
    let price = pigeonVar_list[40] as! Double

    return PStoreProduct(
      entitlements: entitlements,
      productIdentifier: productIdentifier,
      subscriptionGroupIdentifier: subscriptionGroupIdentifier,
      attributes: attributes,
      localizedPrice: localizedPrice,
      localizedSubscriptionPeriod: localizedSubscriptionPeriod,
      period: period,
      periodly: periodly,
      periodWeeks: periodWeeks,
      periodWeeksString: periodWeeksString,
      periodMonths: periodMonths,
      periodMonthsString: periodMonthsString,
      periodYears: periodYears,
      periodYearsString: periodYearsString,
      periodDays: periodDays,
      periodDaysString: periodDaysString,
      dailyPrice: dailyPrice,
      weeklyPrice: weeklyPrice,
      monthlyPrice: monthlyPrice,
      yearlyPrice: yearlyPrice,
      hasFreeTrial: hasFreeTrial,
      trialPeriodEndDate: trialPeriodEndDate,
      trialPeriodEndDateString: trialPeriodEndDateString,
      localizedTrialPeriodPrice: localizedTrialPeriodPrice,
      trialPeriodPrice: trialPeriodPrice,
      trialPeriodDays: trialPeriodDays,
      trialPeriodDaysString: trialPeriodDaysString,
      trialPeriodWeeks: trialPeriodWeeks,
      trialPeriodWeeksString: trialPeriodWeeksString,
      trialPeriodMonths: trialPeriodMonths,
      trialPeriodMonthsString: trialPeriodMonthsString,
      trialPeriodYears: trialPeriodYears,
      trialPeriodYearsString: trialPeriodYearsString,
      trialPeriodText: trialPeriodText,
      locale: locale,
      languageCode: languageCode,
      currencySymbol: currencySymbol,
      currencyCode: currencyCode,
      isFamilyShareable: isFamilyShareable,
      regionCode: regionCode,
      price: price
    )
  }
  func toList() -> [Any?] {
    return [
      entitlements,
      productIdentifier,
      subscriptionGroupIdentifier,
      attributes,
      localizedPrice,
      localizedSubscriptionPeriod,
      period,
      periodly,
      periodWeeks,
      periodWeeksString,
      periodMonths,
      periodMonthsString,
      periodYears,
      periodYearsString,
      periodDays,
      periodDaysString,
      dailyPrice,
      weeklyPrice,
      monthlyPrice,
      yearlyPrice,
      hasFreeTrial,
      trialPeriodEndDate,
      trialPeriodEndDateString,
      localizedTrialPeriodPrice,
      trialPeriodPrice,
      trialPeriodDays,
      trialPeriodDaysString,
      trialPeriodWeeks,
      trialPeriodWeeksString,
      trialPeriodMonths,
      trialPeriodMonthsString,
      trialPeriodYears,
      trialPeriodYearsString,
      trialPeriodText,
      locale,
      languageCode,
      currencySymbol,
      currencyCode,
      isFamilyShareable,
      regionCode,
      price,
    ]
  }
  static func == (lhs: PStoreProduct, rhs: PStoreProduct) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallOptions: Hashable {
  var isHapticFeedbackEnabled: Bool? = nil
  var restoreFailed: PRestoreFailed? = nil
  var shouldShowPurchaseFailureAlert: Bool? = nil
  var shouldPreload: Bool? = nil
  var automaticallyDismiss: Bool? = nil
  var shouldShowWebRestorationAlert: Bool? = nil
  var transactionBackgroundView: PTransactionBackgroundView? = nil
  var overrideProductsByName: [String: String]? = nil
  var shouldShowWebPurchaseConfirmationAlert: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallOptions? {
    let isHapticFeedbackEnabled: Bool? = nilOrValue(pigeonVar_list[0])
    let restoreFailed: PRestoreFailed? = nilOrValue(pigeonVar_list[1])
    let shouldShowPurchaseFailureAlert: Bool? = nilOrValue(pigeonVar_list[2])
    let shouldPreload: Bool? = nilOrValue(pigeonVar_list[3])
    let automaticallyDismiss: Bool? = nilOrValue(pigeonVar_list[4])
    let shouldShowWebRestorationAlert: Bool? = nilOrValue(pigeonVar_list[5])
    let transactionBackgroundView: PTransactionBackgroundView? = nilOrValue(pigeonVar_list[6])
    let overrideProductsByName: [String: String]? = nilOrValue(pigeonVar_list[7])
    let shouldShowWebPurchaseConfirmationAlert: Bool? = nilOrValue(pigeonVar_list[8])

    return PPaywallOptions(
      isHapticFeedbackEnabled: isHapticFeedbackEnabled,
      restoreFailed: restoreFailed,
      shouldShowPurchaseFailureAlert: shouldShowPurchaseFailureAlert,
      shouldPreload: shouldPreload,
      automaticallyDismiss: automaticallyDismiss,
      shouldShowWebRestorationAlert: shouldShowWebRestorationAlert,
      transactionBackgroundView: transactionBackgroundView,
      overrideProductsByName: overrideProductsByName,
      shouldShowWebPurchaseConfirmationAlert: shouldShowWebPurchaseConfirmationAlert
    )
  }
  func toList() -> [Any?] {
    return [
      isHapticFeedbackEnabled,
      restoreFailed,
      shouldShowPurchaseFailureAlert,
      shouldPreload,
      automaticallyDismiss,
      shouldShowWebRestorationAlert,
      transactionBackgroundView,
      overrideProductsByName,
      shouldShowWebPurchaseConfirmationAlert,
    ]
  }
  static func == (lhs: PPaywallOptions, rhs: PPaywallOptions) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseControllerHost: Hashable {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseControllerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PPurchaseControllerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
  static func == (lhs: PPurchaseControllerHost, rhs: PPurchaseControllerHost) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PConfigureCompletionHost: Hashable {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PConfigureCompletionHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PConfigureCompletionHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
  static func == (lhs: PConfigureCompletionHost, rhs: PConfigureCompletionHost) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallPresentationHandlerHost: Hashable {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallPresentationHandlerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PPaywallPresentationHandlerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
  static func == (lhs: PPaywallPresentationHandlerHost, rhs: PPaywallPresentationHandlerHost) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PFeatureHandlerHost: Hashable {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PFeatureHandlerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PFeatureHandlerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
  static func == (lhs: PFeatureHandlerHost, rhs: PFeatureHandlerHost) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PEntitlement: Hashable {
  var id: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PEntitlement? {
    let id: String? = nilOrValue(pigeonVar_list[0])

    return PEntitlement(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id
    ]
  }
  static func == (lhs: PEntitlement, rhs: PEntitlement) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PEntitlements: Hashable {
  var active: [PEntitlement]
  var inactive: [PEntitlement]
  var all: [PEntitlement]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PEntitlements? {
    let active = pigeonVar_list[0] as! [PEntitlement]
    let inactive = pigeonVar_list[1] as! [PEntitlement]
    let all = pigeonVar_list[2] as! [PEntitlement]

    return PEntitlements(
      active: active,
      inactive: inactive,
      all: all
    )
  }
  func toList() -> [Any?] {
    return [
      active,
      inactive,
      all,
    ]
  }
  static func == (lhs: PEntitlements, rhs: PEntitlements) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PSubscriptionStatus {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PActive: PSubscriptionStatus {
  var entitlements: [PEntitlement]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PActive? {
    let entitlements = pigeonVar_list[0] as! [PEntitlement]

    return PActive(
      entitlements: entitlements
    )
  }
  func toList() -> [Any?] {
    return [
      entitlements
    ]
  }
  static func == (lhs: PActive, rhs: PActive) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PInactive: PSubscriptionStatus {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PInactive? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PInactive(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PInactive, rhs: PInactive) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PUnknown: PSubscriptionStatus {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PUnknown? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PUnknown(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PUnknown, rhs: PUnknown) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSuperwallEventInfo: Hashable {
  var eventType: PEventType
  var params: [String: Any]? = nil
  var placementName: String? = nil
  var deviceAttributes: [String: Any]? = nil
  var deepLinkUrl: String? = nil
  var result: PTriggerResult? = nil
  var paywallInfo: PPaywallInfo? = nil
  var transaction: PStoreTransaction? = nil
  var product: PStoreProduct? = nil
  var error: String? = nil
  var triggeredPlacementName: String? = nil
  var attempt: Int64? = nil
  var name: String? = nil
  var survey: PSurvey? = nil
  var selectedOption: PSurveyOption? = nil
  var customResponse: String? = nil
  var status: PPaywallPresentationRequestStatusType? = nil
  var reason: PPaywallPresentationRequestStatusReason? = nil
  var restoreType: PRestoreType? = nil
  var userAttributes: [String: Any]? = nil
  var token: String? = nil
  var userEnrichment: [String: Any]? = nil
  var deviceEnrichment: [String: Any]? = nil
  var message: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSuperwallEventInfo? {
    let eventType = pigeonVar_list[0] as! PEventType
    let params: [String: Any]? = nilOrValue(pigeonVar_list[1])
    let placementName: String? = nilOrValue(pigeonVar_list[2])
    let deviceAttributes: [String: Any]? = nilOrValue(pigeonVar_list[3])
    let deepLinkUrl: String? = nilOrValue(pigeonVar_list[4])
    let result: PTriggerResult? = nilOrValue(pigeonVar_list[5])
    let paywallInfo: PPaywallInfo? = nilOrValue(pigeonVar_list[6])
    let transaction: PStoreTransaction? = nilOrValue(pigeonVar_list[7])
    let product: PStoreProduct? = nilOrValue(pigeonVar_list[8])
    let error: String? = nilOrValue(pigeonVar_list[9])
    let triggeredPlacementName: String? = nilOrValue(pigeonVar_list[10])
    let attempt: Int64? = nilOrValue(pigeonVar_list[11])
    let name: String? = nilOrValue(pigeonVar_list[12])
    let survey: PSurvey? = nilOrValue(pigeonVar_list[13])
    let selectedOption: PSurveyOption? = nilOrValue(pigeonVar_list[14])
    let customResponse: String? = nilOrValue(pigeonVar_list[15])
    let status: PPaywallPresentationRequestStatusType? = nilOrValue(pigeonVar_list[16])
    let reason: PPaywallPresentationRequestStatusReason? = nilOrValue(pigeonVar_list[17])
    let restoreType: PRestoreType? = nilOrValue(pigeonVar_list[18])
    let userAttributes: [String: Any]? = nilOrValue(pigeonVar_list[19])
    let token: String? = nilOrValue(pigeonVar_list[20])
    let userEnrichment: [String: Any]? = nilOrValue(pigeonVar_list[21])
    let deviceEnrichment: [String: Any]? = nilOrValue(pigeonVar_list[22])
    let message: String? = nilOrValue(pigeonVar_list[23])

    return PSuperwallEventInfo(
      eventType: eventType,
      params: params,
      placementName: placementName,
      deviceAttributes: deviceAttributes,
      deepLinkUrl: deepLinkUrl,
      result: result,
      paywallInfo: paywallInfo,
      transaction: transaction,
      product: product,
      error: error,
      triggeredPlacementName: triggeredPlacementName,
      attempt: attempt,
      name: name,
      survey: survey,
      selectedOption: selectedOption,
      customResponse: customResponse,
      status: status,
      reason: reason,
      restoreType: restoreType,
      userAttributes: userAttributes,
      token: token,
      userEnrichment: userEnrichment,
      deviceEnrichment: deviceEnrichment,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      eventType,
      params,
      placementName,
      deviceAttributes,
      deepLinkUrl,
      result,
      paywallInfo,
      transaction,
      product,
      error,
      triggeredPlacementName,
      attempt,
      name,
      survey,
      selectedOption,
      customResponse,
      status,
      reason,
      restoreType,
      userAttributes,
      token,
      userEnrichment,
      deviceEnrichment,
      message,
    ]
  }
  static func == (lhs: PSuperwallEventInfo, rhs: PSuperwallEventInfo) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPaywallPresentationRequestStatusReason {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonDebuggerPresented: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonDebuggerPresented? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonDebuggerPresented(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonDebuggerPresented, rhs: PStatusReasonDebuggerPresented) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonPaywallAlreadyPresented: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonPaywallAlreadyPresented? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonPaywallAlreadyPresented(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonPaywallAlreadyPresented, rhs: PStatusReasonPaywallAlreadyPresented) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonHoldout: PPaywallPresentationRequestStatusReason {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonHoldout? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PStatusReasonHoldout(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
  static func == (lhs: PStatusReasonHoldout, rhs: PStatusReasonHoldout) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonNoAudienceMatch: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonNoAudienceMatch? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonNoAudienceMatch(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonNoAudienceMatch, rhs: PStatusReasonNoAudienceMatch) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonPlacementNotFound: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonPlacementNotFound? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonPlacementNotFound(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonPlacementNotFound, rhs: PStatusReasonPlacementNotFound) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonNoPaywallVc: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonNoPaywallVc? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonNoPaywallVc(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonNoPaywallVc, rhs: PStatusReasonNoPaywallVc) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonNoPresenter: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonNoPresenter? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonNoPresenter(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonNoPresenter, rhs: PStatusReasonNoPresenter) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonNoConfig: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonNoConfig? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonNoConfig(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonNoConfig, rhs: PStatusReasonNoConfig) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PStatusReasonSubsStatusTimeout: PPaywallPresentationRequestStatusReason {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PStatusReasonSubsStatusTimeout? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PStatusReasonSubsStatusTimeout(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PStatusReasonSubsStatusTimeout, rhs: PStatusReasonSubsStatusTimeout) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PIdentityOptions: Hashable {
  var restorePaywallAssignments: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PIdentityOptions? {
    let restorePaywallAssignments: Bool? = nilOrValue(pigeonVar_list[0])

    return PIdentityOptions(
      restorePaywallAssignments: restorePaywallAssignments
    )
  }
  func toList() -> [Any?] {
    return [
      restorePaywallAssignments
    ]
  }
  static func == (lhs: PIdentityOptions, rhs: PIdentityOptions) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PExperiment: Hashable {
  var id: String
  var groupId: String
  var variant: PVariant


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PExperiment? {
    let id = pigeonVar_list[0] as! String
    let groupId = pigeonVar_list[1] as! String
    let variant = pigeonVar_list[2] as! PVariant

    return PExperiment(
      id: id,
      groupId: groupId,
      variant: variant
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      groupId,
      variant,
    ]
  }
  static func == (lhs: PExperiment, rhs: PExperiment) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PTriggerResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPlacementNotFoundTriggerResult: PTriggerResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPlacementNotFoundTriggerResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPlacementNotFoundTriggerResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPlacementNotFoundTriggerResult, rhs: PPlacementNotFoundTriggerResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PNoAudienceMatchTriggerResult: PTriggerResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PNoAudienceMatchTriggerResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PNoAudienceMatchTriggerResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PNoAudienceMatchTriggerResult, rhs: PNoAudienceMatchTriggerResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallTriggerResult: PTriggerResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallTriggerResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PPaywallTriggerResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
  static func == (lhs: PPaywallTriggerResult, rhs: PPaywallTriggerResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PHoldoutTriggerResult: PTriggerResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PHoldoutTriggerResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PHoldoutTriggerResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
  static func == (lhs: PHoldoutTriggerResult, rhs: PHoldoutTriggerResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PErrorTriggerResult: PTriggerResult {
  var error: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PErrorTriggerResult? {
    let error = pigeonVar_list[0] as! String

    return PErrorTriggerResult(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
  static func == (lhs: PErrorTriggerResult, rhs: PErrorTriggerResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PVariant: Hashable {
  var id: String
  var type: PVariantType
  var paywallId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PVariant? {
    let id = pigeonVar_list[0] as! String
    let type = pigeonVar_list[1] as! PVariantType
    let paywallId: String? = nilOrValue(pigeonVar_list[2])

    return PVariant(
      id: id,
      type: type,
      paywallId: paywallId
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      type,
      paywallId,
    ]
  }
  static func == (lhs: PVariant, rhs: PVariant) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PConfirmedAssignment: Hashable {
  var experimentId: String
  var variant: PVariant


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PConfirmedAssignment? {
    let experimentId = pigeonVar_list[0] as! String
    let variant = pigeonVar_list[1] as! PVariant

    return PConfirmedAssignment(
      experimentId: experimentId,
      variant: variant
    )
  }
  func toList() -> [Any?] {
    return [
      experimentId,
      variant,
    ]
  }
  static func == (lhs: PConfirmedAssignment, rhs: PConfirmedAssignment) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPaywallResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasedPaywallResult: PPaywallResult {
  var productId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasedPaywallResult? {
    let productId = pigeonVar_list[0] as! String

    return PPurchasedPaywallResult(
      productId: productId
    )
  }
  func toList() -> [Any?] {
    return [
      productId
    ]
  }
  static func == (lhs: PPurchasedPaywallResult, rhs: PPurchasedPaywallResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PDeclinedPaywallResult: PPaywallResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PDeclinedPaywallResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PDeclinedPaywallResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PDeclinedPaywallResult, rhs: PDeclinedPaywallResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestoredPaywallResult: PPaywallResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestoredPaywallResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PRestoredPaywallResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PRestoredPaywallResult, rhs: PRestoredPaywallResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPresentationResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPlacementNotFoundPresentationResult: PPresentationResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPlacementNotFoundPresentationResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPlacementNotFoundPresentationResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPlacementNotFoundPresentationResult, rhs: PPlacementNotFoundPresentationResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PNoAudienceMatchPresentationResult: PPresentationResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PNoAudienceMatchPresentationResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PNoAudienceMatchPresentationResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PNoAudienceMatchPresentationResult, rhs: PNoAudienceMatchPresentationResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallPresentationResult: PPresentationResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallPresentationResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PPaywallPresentationResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
  static func == (lhs: PPaywallPresentationResult, rhs: PPaywallPresentationResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PHoldoutPresentationResult: PPresentationResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PHoldoutPresentationResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PHoldoutPresentationResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
  static func == (lhs: PHoldoutPresentationResult, rhs: PHoldoutPresentationResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallNotAvailablePresentationResult: PPresentationResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallNotAvailablePresentationResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPaywallNotAvailablePresentationResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
  static func == (lhs: PPaywallNotAvailablePresentationResult, rhs: PPaywallNotAvailablePresentationResult) -> Bool {
    return deepEqualsSuperwallHostGenerated(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSuperwallHostGenerated(value: toList(), hasher: &hasher)
  }
}

private class SuperwallHostGeneratedPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PFeatureGatingBehavior(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallCloseReason(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLocalNotificationType(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PComputedPropertyRequestType(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PSurveyShowCondition(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PNetworkEnvironment(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLogLevel(rawValue: enumResultAsInt)
      }
      return nil
    case 136:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PTransactionBackgroundView(rawValue: enumResultAsInt)
      }
      return nil
    case 137:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLogScope(rawValue: enumResultAsInt)
      }
      return nil
    case 138:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PConfigurationStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 139:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PEventType(rawValue: enumResultAsInt)
      }
      return nil
    case 140:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PSubscriptionStatusType(rawValue: enumResultAsInt)
      }
      return nil
    case 141:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallPresentationRequestStatusType(rawValue: enumResultAsInt)
      }
      return nil
    case 142:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PVariantType(rawValue: enumResultAsInt)
      }
      return nil
    case 143:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallSkippedReason(rawValue: enumResultAsInt)
      }
      return nil
    case 144:
      return PSuccessRedemptionResult.fromList(self.readValue() as! [Any?])
    case 145:
      return PErrorRedemptionResult.fromList(self.readValue() as! [Any?])
    case 146:
      return PErrorInfo.fromList(self.readValue() as! [Any?])
    case 147:
      return PExpiredCodeRedemptionResult.fromList(self.readValue() as! [Any?])
    case 148:
      return PExpiredCodeInfo.fromList(self.readValue() as! [Any?])
    case 149:
      return PInvalidCodeRedemptionResult.fromList(self.readValue() as! [Any?])
    case 150:
      return PExpiredSubscriptionCode.fromList(self.readValue() as! [Any?])
    case 151:
      return PRedemptionInfo.fromList(self.readValue() as! [Any?])
    case 152:
      return PAppUserOwnership.fromList(self.readValue() as! [Any?])
    case 153:
      return PDeviceOwnership.fromList(self.readValue() as! [Any?])
    case 154:
      return PPurchaserInfo.fromList(self.readValue() as! [Any?])
    case 155:
      return PStripeStoreIdentifiers.fromList(self.readValue() as! [Any?])
    case 156:
      return PPaddleStoreIdentifiers.fromList(self.readValue() as! [Any?])
    case 157:
      return PUnknownStoreIdentifiers.fromList(self.readValue() as! [Any?])
    case 158:
      return PRedemptionPaywallInfo.fromList(self.readValue() as! [Any?])
    case 159:
      return PSuperwallOptions.fromList(self.readValue() as! [Any?])
    case 160:
      return PPaywallInfo.fromList(self.readValue() as! [Any?])
    case 161:
      return PProduct.fromList(self.readValue() as! [Any?])
    case 162:
      return PLocalNotification.fromList(self.readValue() as! [Any?])
    case 163:
      return PComputedPropertyRequest.fromList(self.readValue() as! [Any?])
    case 164:
      return PSurvey.fromList(self.readValue() as! [Any?])
    case 165:
      return PSurveyOption.fromList(self.readValue() as! [Any?])
    case 166:
      return PPurchaseCancelled.fromList(self.readValue() as! [Any?])
    case 167:
      return PPurchasePurchased.fromList(self.readValue() as! [Any?])
    case 168:
      return PPurchasePending.fromList(self.readValue() as! [Any?])
    case 169:
      return PPurchaseFailed.fromList(self.readValue() as! [Any?])
    case 170:
      return PRestorationRestored.fromList(self.readValue() as! [Any?])
    case 171:
      return PRestorationFailed.fromList(self.readValue() as! [Any?])
    case 172:
      return PViaPurchase.fromList(self.readValue() as! [Any?])
    case 173:
      return PViaRestore.fromList(self.readValue() as! [Any?])
    case 174:
      return PRestoreFailed.fromList(self.readValue() as! [Any?])
    case 175:
      return PLogging.fromList(self.readValue() as! [Any?])
    case 176:
      return PStoreTransaction.fromList(self.readValue() as! [Any?])
    case 177:
      return PStoreProduct.fromList(self.readValue() as! [Any?])
    case 178:
      return PPaywallOptions.fromList(self.readValue() as! [Any?])
    case 179:
      return PPurchaseControllerHost.fromList(self.readValue() as! [Any?])
    case 180:
      return PConfigureCompletionHost.fromList(self.readValue() as! [Any?])
    case 181:
      return PPaywallPresentationHandlerHost.fromList(self.readValue() as! [Any?])
    case 182:
      return PFeatureHandlerHost.fromList(self.readValue() as! [Any?])
    case 183:
      return PEntitlement.fromList(self.readValue() as! [Any?])
    case 184:
      return PEntitlements.fromList(self.readValue() as! [Any?])
    case 185:
      return PActive.fromList(self.readValue() as! [Any?])
    case 186:
      return PInactive.fromList(self.readValue() as! [Any?])
    case 187:
      return PUnknown.fromList(self.readValue() as! [Any?])
    case 188:
      return PSuperwallEventInfo.fromList(self.readValue() as! [Any?])
    case 189:
      return PStatusReasonDebuggerPresented.fromList(self.readValue() as! [Any?])
    case 190:
      return PStatusReasonPaywallAlreadyPresented.fromList(self.readValue() as! [Any?])
    case 191:
      return PStatusReasonHoldout.fromList(self.readValue() as! [Any?])
    case 192:
      return PStatusReasonNoAudienceMatch.fromList(self.readValue() as! [Any?])
    case 193:
      return PStatusReasonPlacementNotFound.fromList(self.readValue() as! [Any?])
    case 194:
      return PStatusReasonNoPaywallVc.fromList(self.readValue() as! [Any?])
    case 195:
      return PStatusReasonNoPresenter.fromList(self.readValue() as! [Any?])
    case 196:
      return PStatusReasonNoConfig.fromList(self.readValue() as! [Any?])
    case 197:
      return PStatusReasonSubsStatusTimeout.fromList(self.readValue() as! [Any?])
    case 198:
      return PIdentityOptions.fromList(self.readValue() as! [Any?])
    case 199:
      return PExperiment.fromList(self.readValue() as! [Any?])
    case 200:
      return PPlacementNotFoundTriggerResult.fromList(self.readValue() as! [Any?])
    case 201:
      return PNoAudienceMatchTriggerResult.fromList(self.readValue() as! [Any?])
    case 202:
      return PPaywallTriggerResult.fromList(self.readValue() as! [Any?])
    case 203:
      return PHoldoutTriggerResult.fromList(self.readValue() as! [Any?])
    case 204:
      return PErrorTriggerResult.fromList(self.readValue() as! [Any?])
    case 205:
      return PVariant.fromList(self.readValue() as! [Any?])
    case 206:
      return PConfirmedAssignment.fromList(self.readValue() as! [Any?])
    case 207:
      return PPurchasedPaywallResult.fromList(self.readValue() as! [Any?])
    case 208:
      return PDeclinedPaywallResult.fromList(self.readValue() as! [Any?])
    case 209:
      return PRestoredPaywallResult.fromList(self.readValue() as! [Any?])
    case 210:
      return PPlacementNotFoundPresentationResult.fromList(self.readValue() as! [Any?])
    case 211:
      return PNoAudienceMatchPresentationResult.fromList(self.readValue() as! [Any?])
    case 212:
      return PPaywallPresentationResult.fromList(self.readValue() as! [Any?])
    case 213:
      return PHoldoutPresentationResult.fromList(self.readValue() as! [Any?])
    case 214:
      return PPaywallNotAvailablePresentationResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SuperwallHostGeneratedPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PFeatureGatingBehavior {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallCloseReason {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLocalNotificationType {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? PComputedPropertyRequestType {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSurveyShowCondition {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? PNetworkEnvironment {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLogLevel {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? PTransactionBackgroundView {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLogScope {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else if let value = value as? PConfigurationStatus {
      super.writeByte(138)
      super.writeValue(value.rawValue)
    } else if let value = value as? PEventType {
      super.writeByte(139)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSubscriptionStatusType {
      super.writeByte(140)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallPresentationRequestStatusType {
      super.writeByte(141)
      super.writeValue(value.rawValue)
    } else if let value = value as? PVariantType {
      super.writeByte(142)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallSkippedReason {
      super.writeByte(143)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSuccessRedemptionResult {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? PErrorRedemptionResult {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? PErrorInfo {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? PExpiredCodeRedemptionResult {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? PExpiredCodeInfo {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? PInvalidCodeRedemptionResult {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? PExpiredSubscriptionCode {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? PRedemptionInfo {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? PAppUserOwnership {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else if let value = value as? PDeviceOwnership {
      super.writeByte(153)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaserInfo {
      super.writeByte(154)
      super.writeValue(value.toList())
    } else if let value = value as? PStripeStoreIdentifiers {
      super.writeByte(155)
      super.writeValue(value.toList())
    } else if let value = value as? PPaddleStoreIdentifiers {
      super.writeByte(156)
      super.writeValue(value.toList())
    } else if let value = value as? PUnknownStoreIdentifiers {
      super.writeByte(157)
      super.writeValue(value.toList())
    } else if let value = value as? PRedemptionPaywallInfo {
      super.writeByte(158)
      super.writeValue(value.toList())
    } else if let value = value as? PSuperwallOptions {
      super.writeByte(159)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallInfo {
      super.writeByte(160)
      super.writeValue(value.toList())
    } else if let value = value as? PProduct {
      super.writeByte(161)
      super.writeValue(value.toList())
    } else if let value = value as? PLocalNotification {
      super.writeByte(162)
      super.writeValue(value.toList())
    } else if let value = value as? PComputedPropertyRequest {
      super.writeByte(163)
      super.writeValue(value.toList())
    } else if let value = value as? PSurvey {
      super.writeByte(164)
      super.writeValue(value.toList())
    } else if let value = value as? PSurveyOption {
      super.writeByte(165)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseCancelled {
      super.writeByte(166)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasePurchased {
      super.writeByte(167)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasePending {
      super.writeByte(168)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseFailed {
      super.writeByte(169)
      super.writeValue(value.toList())
    } else if let value = value as? PRestorationRestored {
      super.writeByte(170)
      super.writeValue(value.toList())
    } else if let value = value as? PRestorationFailed {
      super.writeByte(171)
      super.writeValue(value.toList())
    } else if let value = value as? PViaPurchase {
      super.writeByte(172)
      super.writeValue(value.toList())
    } else if let value = value as? PViaRestore {
      super.writeByte(173)
      super.writeValue(value.toList())
    } else if let value = value as? PRestoreFailed {
      super.writeByte(174)
      super.writeValue(value.toList())
    } else if let value = value as? PLogging {
      super.writeByte(175)
      super.writeValue(value.toList())
    } else if let value = value as? PStoreTransaction {
      super.writeByte(176)
      super.writeValue(value.toList())
    } else if let value = value as? PStoreProduct {
      super.writeByte(177)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallOptions {
      super.writeByte(178)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseControllerHost {
      super.writeByte(179)
      super.writeValue(value.toList())
    } else if let value = value as? PConfigureCompletionHost {
      super.writeByte(180)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallPresentationHandlerHost {
      super.writeByte(181)
      super.writeValue(value.toList())
    } else if let value = value as? PFeatureHandlerHost {
      super.writeByte(182)
      super.writeValue(value.toList())
    } else if let value = value as? PEntitlement {
      super.writeByte(183)
      super.writeValue(value.toList())
    } else if let value = value as? PEntitlements {
      super.writeByte(184)
      super.writeValue(value.toList())
    } else if let value = value as? PActive {
      super.writeByte(185)
      super.writeValue(value.toList())
    } else if let value = value as? PInactive {
      super.writeByte(186)
      super.writeValue(value.toList())
    } else if let value = value as? PUnknown {
      super.writeByte(187)
      super.writeValue(value.toList())
    } else if let value = value as? PSuperwallEventInfo {
      super.writeByte(188)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonDebuggerPresented {
      super.writeByte(189)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonPaywallAlreadyPresented {
      super.writeByte(190)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonHoldout {
      super.writeByte(191)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonNoAudienceMatch {
      super.writeByte(192)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonPlacementNotFound {
      super.writeByte(193)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonNoPaywallVc {
      super.writeByte(194)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonNoPresenter {
      super.writeByte(195)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonNoConfig {
      super.writeByte(196)
      super.writeValue(value.toList())
    } else if let value = value as? PStatusReasonSubsStatusTimeout {
      super.writeByte(197)
      super.writeValue(value.toList())
    } else if let value = value as? PIdentityOptions {
      super.writeByte(198)
      super.writeValue(value.toList())
    } else if let value = value as? PExperiment {
      super.writeByte(199)
      super.writeValue(value.toList())
    } else if let value = value as? PPlacementNotFoundTriggerResult {
      super.writeByte(200)
      super.writeValue(value.toList())
    } else if let value = value as? PNoAudienceMatchTriggerResult {
      super.writeByte(201)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallTriggerResult {
      super.writeByte(202)
      super.writeValue(value.toList())
    } else if let value = value as? PHoldoutTriggerResult {
      super.writeByte(203)
      super.writeValue(value.toList())
    } else if let value = value as? PErrorTriggerResult {
      super.writeByte(204)
      super.writeValue(value.toList())
    } else if let value = value as? PVariant {
      super.writeByte(205)
      super.writeValue(value.toList())
    } else if let value = value as? PConfirmedAssignment {
      super.writeByte(206)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasedPaywallResult {
      super.writeByte(207)
      super.writeValue(value.toList())
    } else if let value = value as? PDeclinedPaywallResult {
      super.writeByte(208)
      super.writeValue(value.toList())
    } else if let value = value as? PRestoredPaywallResult {
      super.writeByte(209)
      super.writeValue(value.toList())
    } else if let value = value as? PPlacementNotFoundPresentationResult {
      super.writeByte(210)
      super.writeValue(value.toList())
    } else if let value = value as? PNoAudienceMatchPresentationResult {
      super.writeByte(211)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallPresentationResult {
      super.writeByte(212)
      super.writeValue(value.toList())
    } else if let value = value as? PHoldoutPresentationResult {
      super.writeByte(213)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallNotAvailablePresentationResult {
      super.writeByte(214)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SuperwallHostGeneratedPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SuperwallHostGeneratedPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SuperwallHostGeneratedPigeonCodecWriter(data: data)
  }
}

class SuperwallHostGeneratedPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = SuperwallHostGeneratedPigeonCodec(readerWriter: SuperwallHostGeneratedPigeonCodecReaderWriter())
}

var superwallHostGeneratedPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: SuperwallHostGeneratedPigeonCodecReaderWriter());


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PSuperwallHostApi {
  func configure(apiKey: String, purchaseController: PPurchaseControllerHost?, options: PSuperwallOptions?, completion: PConfigureCompletionHost?, completion: @escaping (Result<Void, Error>) -> Void)
  func reset() throws
  func setDelegate(hasDelegate: Bool) throws
  func confirmAllAssignments(completion: @escaping (Result<[PConfirmedAssignment], Error>) -> Void)
  func restorePurchases(completion: @escaping (Result<PRestorationResult, Error>) -> Void)
  func getLogLevel() throws -> String
  func setLogLevel(logLevel: String) throws
  func getUserAttributes() throws -> [String: Any]
  func setUserAttributes(userAttributes: [String: Any]) throws
  func getDeviceAttributes(completion: @escaping (Result<[String: Any], Error>) -> Void)
  func getLocaleIdentifier() throws -> String?
  func setLocaleIdentifier(localeIdentifier: String?) throws
  func getUserId() throws -> String
  func getIsLoggedIn() throws -> Bool
  func getIsInitialized() throws -> Bool
  func identify(userId: String, identityOptions: PIdentityOptions?) throws
  func getEntitlements() throws -> PEntitlements
  func getSubscriptionStatus() throws -> PSubscriptionStatus
  func setSubscriptionStatus(subscriptionStatus: PSubscriptionStatus) throws
  func getConfigurationStatus() throws -> PConfigurationStatus
  func getIsConfigured() throws -> Bool
  func getPresentationResult(placement: String, params: [String: Any]?, completion: @escaping (Result<PPresentationResult, Error>) -> Void)
  func getIsPaywallPresented() throws -> Bool
  func preloadAllPaywalls() throws
  func preloadPaywallsForPlacements(placementNames: [String]) throws
  func handleDeepLink(url: String) throws -> Bool
  func togglePaywallSpinner(isHidden: Bool) throws
  func getLatestPaywallInfo() throws -> PPaywallInfo?
  func registerPlacement(placement: String, params: [String: Any]?, handler: PPaywallPresentationHandlerHost?, feature: PFeatureHandlerHost?, completion: @escaping (Result<Void, Error>) -> Void)
  func dismiss() throws
  func getOverrideProductsByName() throws -> [String: String]?
  func setOverrideProductsByName(overrideProducts: [String: String]?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PSuperwallHostApiSetup {
  static var codec: FlutterStandardMessageCodec { SuperwallHostGeneratedPigeonCodec.shared }
  /// Sets up an instance of `PSuperwallHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PSuperwallHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let configureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.configure\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let apiKeyArg = args[0] as! String
        let purchaseControllerArg: PPurchaseControllerHost? = nilOrValue(args[1])
        let optionsArg: PSuperwallOptions? = nilOrValue(args[2])
        let completionArg: PConfigureCompletionHost? = nilOrValue(args[3])
        api.configure(apiKey: apiKeyArg, purchaseController: purchaseControllerArg, options: optionsArg, completion: completionArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configureChannel.setMessageHandler(nil)
    }
    let resetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.reset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resetChannel.setMessageHandler { _, reply in
        do {
          try api.reset()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resetChannel.setMessageHandler(nil)
    }
    let setDelegateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setDelegate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDelegateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hasDelegateArg = args[0] as! Bool
        do {
          try api.setDelegate(hasDelegate: hasDelegateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDelegateChannel.setMessageHandler(nil)
    }
    let confirmAllAssignmentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.confirmAllAssignments\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      confirmAllAssignmentsChannel.setMessageHandler { _, reply in
        api.confirmAllAssignments { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      confirmAllAssignmentsChannel.setMessageHandler(nil)
    }
    let restorePurchasesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.restorePurchases\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      restorePurchasesChannel.setMessageHandler { _, reply in
        api.restorePurchases { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      restorePurchasesChannel.setMessageHandler(nil)
    }
    let getLogLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLogLevel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLogLevelChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLogLevel()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLogLevelChannel.setMessageHandler(nil)
    }
    let setLogLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLogLevel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLogLevelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let logLevelArg = args[0] as! String
        do {
          try api.setLogLevel(logLevel: logLevelArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLogLevelChannel.setMessageHandler(nil)
    }
    let getUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserAttributesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUserAttributes()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserAttributesChannel.setMessageHandler(nil)
    }
    let setUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userAttributesArg = args[0] as! [String: Any]
        do {
          try api.setUserAttributes(userAttributes: userAttributesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUserAttributesChannel.setMessageHandler(nil)
    }
    let getDeviceAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getDeviceAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceAttributesChannel.setMessageHandler { _, reply in
        api.getDeviceAttributes { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDeviceAttributesChannel.setMessageHandler(nil)
    }
    let getLocaleIdentifierChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLocaleIdentifier\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLocaleIdentifierChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLocaleIdentifier()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLocaleIdentifierChannel.setMessageHandler(nil)
    }
    let setLocaleIdentifierChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLocaleIdentifier\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLocaleIdentifierChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let localeIdentifierArg: String? = nilOrValue(args[0])
        do {
          try api.setLocaleIdentifier(localeIdentifier: localeIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLocaleIdentifierChannel.setMessageHandler(nil)
    }
    let getUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUserId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserIdChannel.setMessageHandler(nil)
    }
    let getIsLoggedInChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsLoggedIn\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsLoggedInChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsLoggedIn()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsLoggedInChannel.setMessageHandler(nil)
    }
    let getIsInitializedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsInitialized\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsInitializedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsInitialized()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsInitializedChannel.setMessageHandler(nil)
    }
    let identifyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.identify\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      identifyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        let identityOptionsArg: PIdentityOptions? = nilOrValue(args[1])
        do {
          try api.identify(userId: userIdArg, identityOptions: identityOptionsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      identifyChannel.setMessageHandler(nil)
    }
    let getEntitlementsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getEntitlements\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getEntitlementsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getEntitlements()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getEntitlementsChannel.setMessageHandler(nil)
    }
    let getSubscriptionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getSubscriptionStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSubscriptionStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getSubscriptionStatus()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSubscriptionStatusChannel.setMessageHandler(nil)
    }
    let setSubscriptionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setSubscriptionStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSubscriptionStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let subscriptionStatusArg = args[0] as! PSubscriptionStatus
        do {
          try api.setSubscriptionStatus(subscriptionStatus: subscriptionStatusArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSubscriptionStatusChannel.setMessageHandler(nil)
    }
    let getConfigurationStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getConfigurationStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConfigurationStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getConfigurationStatus()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getConfigurationStatusChannel.setMessageHandler(nil)
    }
    let getIsConfiguredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsConfigured\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsConfiguredChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsConfigured()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsConfiguredChannel.setMessageHandler(nil)
    }
    let getPresentationResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getPresentationResult\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPresentationResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placementArg = args[0] as! String
        let paramsArg: [String: Any]? = nilOrValue(args[1])
        api.getPresentationResult(placement: placementArg, params: paramsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPresentationResultChannel.setMessageHandler(nil)
    }
    let getIsPaywallPresentedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsPaywallPresented\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsPaywallPresentedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsPaywallPresented()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsPaywallPresentedChannel.setMessageHandler(nil)
    }
    let preloadAllPaywallsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadAllPaywalls\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      preloadAllPaywallsChannel.setMessageHandler { _, reply in
        do {
          try api.preloadAllPaywalls()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      preloadAllPaywallsChannel.setMessageHandler(nil)
    }
    let preloadPaywallsForPlacementsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadPaywallsForPlacements\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      preloadPaywallsForPlacementsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placementNamesArg = args[0] as! [String]
        do {
          try api.preloadPaywallsForPlacements(placementNames: placementNamesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      preloadPaywallsForPlacementsChannel.setMessageHandler(nil)
    }
    let handleDeepLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.handleDeepLink\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleDeepLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        do {
          let result = try api.handleDeepLink(url: urlArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      handleDeepLinkChannel.setMessageHandler(nil)
    }
    let togglePaywallSpinnerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.togglePaywallSpinner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      togglePaywallSpinnerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isHiddenArg = args[0] as! Bool
        do {
          try api.togglePaywallSpinner(isHidden: isHiddenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      togglePaywallSpinnerChannel.setMessageHandler(nil)
    }
    let getLatestPaywallInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLatestPaywallInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLatestPaywallInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLatestPaywallInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLatestPaywallInfoChannel.setMessageHandler(nil)
    }
    let registerPlacementChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.registerPlacement\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerPlacementChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placementArg = args[0] as! String
        let paramsArg: [String: Any]? = nilOrValue(args[1])
        let handlerArg: PPaywallPresentationHandlerHost? = nilOrValue(args[2])
        let featureArg: PFeatureHandlerHost? = nilOrValue(args[3])
        api.registerPlacement(placement: placementArg, params: paramsArg, handler: handlerArg, feature: featureArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerPlacementChannel.setMessageHandler(nil)
    }
    let dismissChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.dismiss\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      dismissChannel.setMessageHandler { _, reply in
        do {
          try api.dismiss()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      dismissChannel.setMessageHandler(nil)
    }
    let getOverrideProductsByNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getOverrideProductsByName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getOverrideProductsByNameChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getOverrideProductsByName()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getOverrideProductsByNameChannel.setMessageHandler(nil)
    }
    let setOverrideProductsByNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setOverrideProductsByName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setOverrideProductsByNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let overrideProductsArg: [String: String]? = nilOrValue(args[0])
        do {
          try api.setOverrideProductsByName(overrideProducts: overrideProductsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setOverrideProductsByNameChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PSuperwallDelegateGeneratedProtocol {
  func subscriptionStatusDidChange(from fromArg: PSubscriptionStatus, to toArg: PSubscriptionStatus, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleSuperwallEvent(eventInfo eventInfoArg: PSuperwallEventInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleCustomPaywallAction(name nameArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func willDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func willPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func paywallWillOpenURL(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func paywallWillOpenDeepLink(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleLog(level levelArg: String, scope scopeArg: String, message messageArg: String?, info infoArg: [String: Any]?, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func willRedeemLink(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didRedeemLink(result resultArg: PRedemptionResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleSuperwallDeepLink(fullURL fullURLArg: String, pathComponents pathComponentsArg: [String], queryParameters queryParametersArg: [String: String], completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PSuperwallDelegateGenerated: PSuperwallDelegateGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostGeneratedPigeonCodec {
    return SuperwallHostGeneratedPigeonCodec.shared
  }
  func subscriptionStatusDidChange(from fromArg: PSubscriptionStatus, to toArg: PSubscriptionStatus, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([fromArg, toArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleSuperwallEvent(eventInfo eventInfoArg: PSuperwallEventInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleCustomPaywallAction(name nameArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([nameArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func willDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func willPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func didDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func didPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func paywallWillOpenURL(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func paywallWillOpenDeepLink(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleLog(level levelArg: String, scope scopeArg: String, message messageArg: String?, info infoArg: [String: Any]?, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([levelArg, scopeArg, messageArg, infoArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func willRedeemLink(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willRedeemLink\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func didRedeemLink(result resultArg: PRedemptionResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didRedeemLink\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleSuperwallDeepLink(fullURL fullURLArg: String, pathComponents pathComponentsArg: [String], queryParameters queryParametersArg: [String: String], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([fullURLArg, pathComponentsArg, queryParametersArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PPurchaseControllerGeneratedProtocol {
  func purchaseFromAppStore(productId productIdArg: String, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void)
  func purchaseFromGooglePlay(productId productIdArg: String, basePlanId basePlanIdArg: String?, offerId offerIdArg: String?, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void)
  func restorePurchases(completion: @escaping (Result<PRestorationResult, PigeonError>) -> Void)
}
class PPurchaseControllerGenerated: PPurchaseControllerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostGeneratedPigeonCodec {
    return SuperwallHostGeneratedPigeonCodec.shared
  }
  func purchaseFromAppStore(productId productIdArg: String, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([productIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PPurchaseResult
        completion(.success(result))
      }
    }
  }
  func purchaseFromGooglePlay(productId productIdArg: String, basePlanId basePlanIdArg: String?, offerId offerIdArg: String?, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([productIdArg, basePlanIdArg, offerIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PPurchaseResult
        completion(.success(result))
      }
    }
  }
  func restorePurchases(completion: @escaping (Result<PRestorationResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.restorePurchases\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PRestorationResult
        completion(.success(result))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PConfigureCompletionGeneratedProtocol {
  func onConfigureCompleted(success successArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PConfigureCompletionGenerated: PConfigureCompletionGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostGeneratedPigeonCodec {
    return SuperwallHostGeneratedPigeonCodec.shared
  }
  func onConfigureCompleted(success successArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([successArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PPaywallPresentationHandlerGeneratedProtocol {
  func onPresent(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDismiss(paywallInfo paywallInfoArg: PPaywallInfo, paywallResult paywallResultArg: PPaywallResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onSkip(reason reasonArg: PPaywallSkippedReason, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PPaywallPresentationHandlerGenerated: PPaywallPresentationHandlerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostGeneratedPigeonCodec {
    return SuperwallHostGeneratedPigeonCodec.shared
  }
  func onPresent(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onDismiss(paywallInfo paywallInfoArg: PPaywallInfo, paywallResult paywallResultArg: PPaywallResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg, paywallResultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onSkip(reason reasonArg: PPaywallSkippedReason, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([reasonArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PFeatureHandlerGeneratedProtocol {
  func onFeature(id idArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PFeatureHandlerGenerated: PFeatureHandlerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostGeneratedPigeonCodec {
    return SuperwallHostGeneratedPigeonCodec.shared
  }
  func onFeature(id idArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}

private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class StreamSubscriptionStatusStreamHandler: PigeonEventChannelWrapper<PSubscriptionStatus> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: StreamSubscriptionStatusStreamHandler) {
    var channelName = "dev.flutter.pigeon.superwallkit_flutter.SubscriptionStatusStream.streamSubscriptionStatus"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<PSubscriptionStatus>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: superwallHostGeneratedPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
