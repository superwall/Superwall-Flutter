// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private fun deepEqualsSuperwallHostGenerated(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
      return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
      return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
      return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
      return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsSuperwallHostGenerated(a[it], b[it]) }
  }
  if (a is List<*> && b is List<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsSuperwallHostGenerated(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size && a.all {
        (b as Map<Any?, Any?>).containsKey(it.key) &&
        deepEqualsSuperwallHostGenerated(it.value, b[it.key])
    }
  }
  return a == b
}
    

enum class PFeatureGatingBehavior(val raw: Int) {
  GATED(0),
  NON_GATED(1);

  companion object {
    fun ofRaw(raw: Int): PFeatureGatingBehavior? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PPaywallCloseReason(val raw: Int) {
  /**
   * The paywall was closed by system logic, either after a purchase, because
   * a deeplink was presented, close button pressed, etc.
   */
  SYSTEM_LOGIC(0),
  /**
   * The paywall was automatically closed because another paywall will show.
   *
   * This prevents ``Superwall/register(placement:params:handler:feature:)`` `feature`
   * block from executing on dismiss of the paywall, because another paywall is set to show
   */
  FOR_NEXT_PAYWALL(1),
  /**
   * The paywall was closed because the webview couldn't be loaded.
   *
   * If this happens for a gated paywall, the ``PaywallPresentationHandler/onError(_:)``
   * handler will be called. If it's for a non-gated paywall, the feature block will be called.
   */
  WEB_VIEW_FAILED_TO_LOAD(2),
  /** The paywall was closed because the user tapped the close button or dragged to dismiss. */
  MANUAL_CLOSE(3),
  /** The paywall hasn't been closed yet. */
  NONE(4);

  companion object {
    fun ofRaw(raw: Int): PPaywallCloseReason? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PLocalNotificationType(val raw: Int) {
  TRIAL_STARTED(0),
  UNSUPPORTED(1);

  companion object {
    fun ofRaw(raw: Int): PLocalNotificationType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PComputedPropertyRequestType(val raw: Int) {
  MINUTES_SINCE(0),
  HOURS_SINCE(1),
  DAYS_SINCE(2),
  MONTHS_SINCE(3),
  YEARS_SINCE(4),
  PLACEMENTS_IN_HOUR(5),
  PLACEMENTS_IN_DAY(6),
  PLACEMENTS_IN_WEEK(7),
  PLACEMENTS_IN_MONTH(8),
  PLACEMENTS_SINCE_INSTALL(9);

  companion object {
    fun ofRaw(raw: Int): PComputedPropertyRequestType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PSurveyShowCondition(val raw: Int) {
  ON_MANUAL_CLOSE(0),
  ON_PURCHASE(1);

  companion object {
    fun ofRaw(raw: Int): PSurveyShowCondition? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PNetworkEnvironment(val raw: Int) {
  RELEASE(0),
  RELEASE_CANDIDATE(1),
  DEVELOPER(2);

  companion object {
    fun ofRaw(raw: Int): PNetworkEnvironment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PLogLevel(val raw: Int) {
  DEBUG(0),
  INFO(1),
  WARN(2),
  ERROR(3),
  NONE(4);

  companion object {
    fun ofRaw(raw: Int): PLogLevel? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PTransactionBackgroundView(val raw: Int) {
  SPINNER(0),
  NONE(1);

  companion object {
    fun ofRaw(raw: Int): PTransactionBackgroundView? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PLogScope(val raw: Int) {
  LOCALIZATION_MANAGER(0),
  BOUNCE_BUTTON(1),
  CORE_DATA(2),
  CONFIG_MANAGER(3),
  IDENTITY_MANAGER(4),
  DEBUG_MANAGER(5),
  DEBUG_VIEW_CONTROLLER(6),
  LOCALIZATION_VIEW_CONTROLLER(7),
  GAME_CONTROLLER_MANAGER(8),
  DEVICE(9),
  NETWORK(10),
  PAYWALL_EVENTS(11),
  PRODUCTS_MANAGER(12),
  STORE_KIT_MANAGER(13),
  PLACEMENTS(14),
  RECEIPTS(15),
  SUPERWALL_CORE(16),
  PAYWALL_PRESENTATION(17),
  TRANSACTIONS(18),
  PAYWALL_VIEW_CONTROLLER(19),
  CACHE(20),
  ALL(21);

  companion object {
    fun ofRaw(raw: Int): PLogScope? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PConfigurationStatus(val raw: Int) {
  PENDING(0),
  CONFIGURED(1),
  FAILED(2);

  companion object {
    fun ofRaw(raw: Int): PConfigurationStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PEventType(val raw: Int) {
  FIRST_SEEN(0),
  APP_OPEN(1),
  APP_LAUNCH(2),
  IDENTITY_ALIAS(3),
  APP_INSTALL(4),
  RESTORE_START(5),
  RESTORE_COMPLETE(6),
  RESTORE_FAIL(7),
  SESSION_START(8),
  DEVICE_ATTRIBUTES(9),
  SUBSCRIPTION_STATUS_DID_CHANGE(10),
  APP_CLOSE(11),
  DEEP_LINK(12),
  TRIGGER_FIRE(13),
  PAYWALL_OPEN(14),
  PAYWALL_CLOSE(15),
  PAYWALL_DECLINE(16),
  TRANSACTION_START(17),
  TRANSACTION_FAIL(18),
  TRANSACTION_ABANDON(19),
  TRANSACTION_COMPLETE(20),
  SUBSCRIPTION_START(21),
  FREE_TRIAL_START(22),
  TRANSACTION_RESTORE(23),
  TRANSACTION_TIMEOUT(24),
  USER_ATTRIBUTES(25),
  NON_RECURRING_PRODUCT_PURCHASE(26),
  PAYWALL_RESPONSE_LOAD_START(27),
  PAYWALL_RESPONSE_LOAD_NOT_FOUND(28),
  PAYWALL_RESPONSE_LOAD_FAIL(29),
  PAYWALL_RESPONSE_LOAD_COMPLETE(30),
  PAYWALL_WEBVIEW_LOAD_START(31),
  PAYWALL_WEBVIEW_LOAD_FAIL(32),
  PAYWALL_WEBVIEW_LOAD_COMPLETE(33),
  PAYWALL_WEBVIEW_LOAD_TIMEOUT(34),
  PAYWALL_WEBVIEW_LOAD_FALLBACK(35),
  PAYWALL_PRODUCTS_LOAD_RETRY(36),
  PAYWALL_PRODUCTS_LOAD_START(37),
  PAYWALL_PRODUCTS_LOAD_FAIL(38),
  PAYWALL_PRODUCTS_LOAD_COMPLETE(39),
  PAYWALL_RESOURCE_LOAD_FAIL(40),
  SURVEY_RESPONSE(41),
  PAYWALL_PRESENTATION_REQUEST(42),
  TOUCHES_BEGAN(43),
  SURVEY_CLOSE(44),
  RESET(45),
  CONFIG_REFRESH(46),
  CUSTOM_PLACEMENT(47),
  CONFIG_ATTRIBUTES(48),
  CONFIRM_ALL_ASSIGNMENTS(49),
  CONFIG_FAIL(50),
  AD_SERVICES_TOKEN_REQUEST_START(51),
  AD_SERVICES_TOKEN_REQUEST_FAIL(52),
  AD_SERVICES_TOKEN_REQUEST_COMPLETE(53),
  SHIMMER_VIEW_START(54),
  SHIMMER_VIEW_COMPLETE(55),
  REDEMPTION_START(56),
  REDEMPTION_COMPLETE(57),
  REDEMPTION_FAIL(58),
  ENRICHMENT_START(59),
  ENRICHMENT_COMPLETE(60),
  ENRICHMENT_FAIL(61),
  NETWORK_DECODING_FAIL(62);

  companion object {
    fun ofRaw(raw: Int): PEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PSubscriptionStatusType(val raw: Int) {
  ACTIVE(0),
  INACTIVE(1),
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): PSubscriptionStatusType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PPaywallPresentationRequestStatusType(val raw: Int) {
  PRESENTATION(0),
  NO_PRESENTATION(1),
  TIMEOUT(2);

  companion object {
    fun ofRaw(raw: Int): PPaywallPresentationRequestStatusType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PVariantType(val raw: Int) {
  TREATMENT(0),
  HOLDOUT(1);

  companion object {
    fun ofRaw(raw: Int): PVariantType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PPaywallSkippedReason(val raw: Int) {
  HOLDOUT(0),
  NO_AUDIENCE_MATCH(1),
  PLACEMENT_NOT_FOUND(2);

  companion object {
    fun ofRaw(raw: Int): PPaywallSkippedReason? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PRedemptionResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PSuccessRedemptionResult (
  val code: String,
  val redemptionInfo: PRedemptionInfo
) : PRedemptionResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PSuccessRedemptionResult {
      val code = pigeonVar_list[0] as String
      val redemptionInfo = pigeonVar_list[1] as PRedemptionInfo
      return PSuccessRedemptionResult(code, redemptionInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      redemptionInfo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PSuccessRedemptionResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PErrorRedemptionResult (
  val code: String,
  val error: PErrorInfo
) : PRedemptionResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PErrorRedemptionResult {
      val code = pigeonVar_list[0] as String
      val error = pigeonVar_list[1] as PErrorInfo
      return PErrorRedemptionResult(code, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      error,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PErrorRedemptionResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PErrorInfo (
  val message: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PErrorInfo {
      val message = pigeonVar_list[0] as String
      return PErrorInfo(message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      message,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PErrorInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PExpiredCodeRedemptionResult (
  val code: String,
  val info: PExpiredCodeInfo
) : PRedemptionResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PExpiredCodeRedemptionResult {
      val code = pigeonVar_list[0] as String
      val info = pigeonVar_list[1] as PExpiredCodeInfo
      return PExpiredCodeRedemptionResult(code, info)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      info,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PExpiredCodeRedemptionResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Info about the expired code.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PExpiredCodeInfo (
  /** A boolean indicating whether the redemption email has been resent. */
  val resent: Boolean,
  /**
   * An optional String indicating the obfuscated email address that the
   * redemption email was sent to.
   */
  val obfuscatedEmail: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PExpiredCodeInfo {
      val resent = pigeonVar_list[0] as Boolean
      val obfuscatedEmail = pigeonVar_list[1] as String?
      return PExpiredCodeInfo(resent, obfuscatedEmail)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resent,
      obfuscatedEmail,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PExpiredCodeInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PInvalidCodeRedemptionResult (
  val code: String
) : PRedemptionResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PInvalidCodeRedemptionResult {
      val code = pigeonVar_list[0] as String
      return PInvalidCodeRedemptionResult(code)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PInvalidCodeRedemptionResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PExpiredSubscriptionCode (
  val code: String,
  val redemptionInfo: PRedemptionInfo
) : PRedemptionResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PExpiredSubscriptionCode {
      val code = pigeonVar_list[0] as String
      val redemptionInfo = pigeonVar_list[1] as PRedemptionInfo
      return PExpiredSubscriptionCode(code, redemptionInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      redemptionInfo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PExpiredSubscriptionCode) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Information about the redemption.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PRedemptionInfo (
  /** The ownership of the code. */
  val ownership: POwnership,
  /** Info about the purchaser. */
  val purchaserInfo: PPurchaserInfo,
  /** Info about the paywall the purchase was made from. */
  val paywallInfo: PRedemptionPaywallInfo? = null,
  /** The entitlements array. */
  val entitlements: List<PEntitlement>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRedemptionInfo {
      val ownership = pigeonVar_list[0] as POwnership
      val purchaserInfo = pigeonVar_list[1] as PPurchaserInfo
      val paywallInfo = pigeonVar_list[2] as PRedemptionPaywallInfo?
      val entitlements = pigeonVar_list[3] as List<PEntitlement>
      return PRedemptionInfo(ownership, purchaserInfo, paywallInfo, entitlements)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ownership,
      purchaserInfo,
      paywallInfo,
      entitlements,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRedemptionInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Enum specifying code ownership.
 *
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class POwnership 
/** Generated class from Pigeon that represents data sent in messages. */
data class PAppUserOwnership (
  val appUserId: String
) : POwnership()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PAppUserOwnership {
      val appUserId = pigeonVar_list[0] as String
      return PAppUserOwnership(appUserId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appUserId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PAppUserOwnership) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PDeviceOwnership (
  val deviceId: String
) : POwnership()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PDeviceOwnership {
      val deviceId = pigeonVar_list[0] as String
      return PDeviceOwnership(deviceId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PDeviceOwnership) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Info about the purchaser.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PPurchaserInfo (
  /** The app user ID of the purchaser. */
  val appUserId: String,
  /** The email address of the purchaser. */
  val email: String? = null,
  /** The identifiers of the store that was purchased from. */
  val storeIdentifiers: PStoreIdentifiers
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchaserInfo {
      val appUserId = pigeonVar_list[0] as String
      val email = pigeonVar_list[1] as String?
      val storeIdentifiers = pigeonVar_list[2] as PStoreIdentifiers
      return PPurchaserInfo(appUserId, email, storeIdentifiers)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appUserId,
      email,
      storeIdentifiers,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchaserInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Identifiers of the store that was purchased from.
 *
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PStoreIdentifiers 
/**
 * Stripe purchase store identifiers.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PStripeStoreIdentifiers (
  val customerId: String,
  val subscriptionIds: List<String>
) : PStoreIdentifiers()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStripeStoreIdentifiers {
      val customerId = pigeonVar_list[0] as String
      val subscriptionIds = pigeonVar_list[1] as List<String>
      return PStripeStoreIdentifiers(customerId, subscriptionIds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      customerId,
      subscriptionIds,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStripeStoreIdentifiers) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Stripe purchase store identifiers.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PPaddleStoreIdentifiers (
  val customerId: String,
  val subscriptionIds: List<String>
) : PStoreIdentifiers()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaddleStoreIdentifiers {
      val customerId = pigeonVar_list[0] as String
      val subscriptionIds = pigeonVar_list[1] as List<String>
      return PPaddleStoreIdentifiers(customerId, subscriptionIds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      customerId,
      subscriptionIds,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaddleStoreIdentifiers) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Unknown purchase store identifiers.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PUnknownStoreIdentifiers (
  val store: String,
  val additionalInfo: Map<String, Any>
) : PStoreIdentifiers()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PUnknownStoreIdentifiers {
      val store = pigeonVar_list[0] as String
      val additionalInfo = pigeonVar_list[1] as Map<String, Any>
      return PUnknownStoreIdentifiers(store, additionalInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      store,
      additionalInfo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PUnknownStoreIdentifiers) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Info about the paywall the purchase was made from.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PRedemptionPaywallInfo (
  /** The identifier of the paywall. */
  val identifier: String,
  /** The name of the placement. */
  val placementName: String,
  /** The params of the placement. */
  val placementParams: Map<String, Any>,
  /** The ID of the paywall variant. */
  val variantId: String,
  /** The ID of the experiment that the paywall belongs to. */
  val experimentId: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRedemptionPaywallInfo {
      val identifier = pigeonVar_list[0] as String
      val placementName = pigeonVar_list[1] as String
      val placementParams = pigeonVar_list[2] as Map<String, Any>
      val variantId = pigeonVar_list[3] as String
      val experimentId = pigeonVar_list[4] as String
      return PRedemptionPaywallInfo(identifier, placementName, placementParams, variantId, experimentId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      identifier,
      placementName,
      placementParams,
      variantId,
      experimentId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRedemptionPaywallInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PSuperwallOptions (
  val paywalls: PPaywallOptions? = null,
  val networkEnvironment: PNetworkEnvironment? = null,
  val isExternalDataCollectionEnabled: Boolean? = null,
  val localeIdentifier: String? = null,
  val isGameControllerEnabled: Boolean? = null,
  val enableExperimentalDeviceVariables: Boolean? = null,
  val logging: PLogging? = null,
  val passIdentifiersToPlayStore: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PSuperwallOptions {
      val paywalls = pigeonVar_list[0] as PPaywallOptions?
      val networkEnvironment = pigeonVar_list[1] as PNetworkEnvironment?
      val isExternalDataCollectionEnabled = pigeonVar_list[2] as Boolean?
      val localeIdentifier = pigeonVar_list[3] as String?
      val isGameControllerEnabled = pigeonVar_list[4] as Boolean?
      val enableExperimentalDeviceVariables = pigeonVar_list[5] as Boolean?
      val logging = pigeonVar_list[6] as PLogging?
      val passIdentifiersToPlayStore = pigeonVar_list[7] as Boolean?
      return PSuperwallOptions(paywalls, networkEnvironment, isExternalDataCollectionEnabled, localeIdentifier, isGameControllerEnabled, enableExperimentalDeviceVariables, logging, passIdentifiersToPlayStore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      paywalls,
      networkEnvironment,
      isExternalDataCollectionEnabled,
      localeIdentifier,
      isGameControllerEnabled,
      enableExperimentalDeviceVariables,
      logging,
      passIdentifiersToPlayStore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PSuperwallOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallInfo (
  val identifier: String? = null,
  val name: String? = null,
  val experiment: PExperiment? = null,
  val productIds: List<String>? = null,
  val products: List<PProduct>? = null,
  val url: String? = null,
  val presentedByPlacementWithName: String? = null,
  val presentedByPlacementWithId: String? = null,
  val presentedByPlacementAt: String? = null,
  val presentedBy: String? = null,
  val presentationSourceType: String? = null,
  val responseLoadStartTime: String? = null,
  val responseLoadCompleteTime: String? = null,
  val responseLoadFailTime: String? = null,
  val responseLoadDuration: Double? = null,
  val webViewLoadStartTime: String? = null,
  val webViewLoadCompleteTime: String? = null,
  val webViewLoadFailTime: String? = null,
  val webViewLoadDuration: Double? = null,
  val productsLoadStartTime: String? = null,
  val productsLoadCompleteTime: String? = null,
  val productsLoadFailTime: String? = null,
  val productsLoadDuration: Double? = null,
  val paywalljsVersion: String? = null,
  val isFreeTrialAvailable: Boolean? = null,
  val featureGatingBehavior: PFeatureGatingBehavior? = null,
  val closeReason: PPaywallCloseReason? = null,
  val localNotifications: List<PLocalNotification>? = null,
  val computedPropertyRequests: List<PComputedPropertyRequest>? = null,
  val surveys: List<PSurvey>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallInfo {
      val identifier = pigeonVar_list[0] as String?
      val name = pigeonVar_list[1] as String?
      val experiment = pigeonVar_list[2] as PExperiment?
      val productIds = pigeonVar_list[3] as List<String>?
      val products = pigeonVar_list[4] as List<PProduct>?
      val url = pigeonVar_list[5] as String?
      val presentedByPlacementWithName = pigeonVar_list[6] as String?
      val presentedByPlacementWithId = pigeonVar_list[7] as String?
      val presentedByPlacementAt = pigeonVar_list[8] as String?
      val presentedBy = pigeonVar_list[9] as String?
      val presentationSourceType = pigeonVar_list[10] as String?
      val responseLoadStartTime = pigeonVar_list[11] as String?
      val responseLoadCompleteTime = pigeonVar_list[12] as String?
      val responseLoadFailTime = pigeonVar_list[13] as String?
      val responseLoadDuration = pigeonVar_list[14] as Double?
      val webViewLoadStartTime = pigeonVar_list[15] as String?
      val webViewLoadCompleteTime = pigeonVar_list[16] as String?
      val webViewLoadFailTime = pigeonVar_list[17] as String?
      val webViewLoadDuration = pigeonVar_list[18] as Double?
      val productsLoadStartTime = pigeonVar_list[19] as String?
      val productsLoadCompleteTime = pigeonVar_list[20] as String?
      val productsLoadFailTime = pigeonVar_list[21] as String?
      val productsLoadDuration = pigeonVar_list[22] as Double?
      val paywalljsVersion = pigeonVar_list[23] as String?
      val isFreeTrialAvailable = pigeonVar_list[24] as Boolean?
      val featureGatingBehavior = pigeonVar_list[25] as PFeatureGatingBehavior?
      val closeReason = pigeonVar_list[26] as PPaywallCloseReason?
      val localNotifications = pigeonVar_list[27] as List<PLocalNotification>?
      val computedPropertyRequests = pigeonVar_list[28] as List<PComputedPropertyRequest>?
      val surveys = pigeonVar_list[29] as List<PSurvey>?
      return PPaywallInfo(identifier, name, experiment, productIds, products, url, presentedByPlacementWithName, presentedByPlacementWithId, presentedByPlacementAt, presentedBy, presentationSourceType, responseLoadStartTime, responseLoadCompleteTime, responseLoadFailTime, responseLoadDuration, webViewLoadStartTime, webViewLoadCompleteTime, webViewLoadFailTime, webViewLoadDuration, productsLoadStartTime, productsLoadCompleteTime, productsLoadFailTime, productsLoadDuration, paywalljsVersion, isFreeTrialAvailable, featureGatingBehavior, closeReason, localNotifications, computedPropertyRequests, surveys)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      identifier,
      name,
      experiment,
      productIds,
      products,
      url,
      presentedByPlacementWithName,
      presentedByPlacementWithId,
      presentedByPlacementAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PProduct (
  val id: String? = null,
  val name: String? = null,
  val entitlements: List<PEntitlement>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PProduct {
      val id = pigeonVar_list[0] as String?
      val name = pigeonVar_list[1] as String?
      val entitlements = pigeonVar_list[2] as List<PEntitlement>?
      return PProduct(id, name, entitlements)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      name,
      entitlements,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PProduct) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PLocalNotification (
  val id: Long,
  val type: PLocalNotificationType,
  val title: String,
  val subtitle: String? = null,
  val body: String,
  val delay: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PLocalNotification {
      val id = pigeonVar_list[0] as Long
      val type = pigeonVar_list[1] as PLocalNotificationType
      val title = pigeonVar_list[2] as String
      val subtitle = pigeonVar_list[3] as String?
      val body = pigeonVar_list[4] as String
      val delay = pigeonVar_list[5] as Long
      return PLocalNotification(id, type, title, subtitle, body, delay)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      type,
      title,
      subtitle,
      body,
      delay,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PLocalNotification) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PComputedPropertyRequest (
  val type: PComputedPropertyRequestType,
  val eventName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PComputedPropertyRequest {
      val type = pigeonVar_list[0] as PComputedPropertyRequestType
      val eventName = pigeonVar_list[1] as String
      return PComputedPropertyRequest(type, eventName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      eventName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PComputedPropertyRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PSurvey (
  val id: String,
  val assignmentKey: String,
  val title: String,
  val message: String,
  val options: List<PSurveyOption>,
  val presentationCondition: PSurveyShowCondition,
  val presentationProbability: Double,
  val includeOtherOption: Boolean,
  val includeCloseOption: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PSurvey {
      val id = pigeonVar_list[0] as String
      val assignmentKey = pigeonVar_list[1] as String
      val title = pigeonVar_list[2] as String
      val message = pigeonVar_list[3] as String
      val options = pigeonVar_list[4] as List<PSurveyOption>
      val presentationCondition = pigeonVar_list[5] as PSurveyShowCondition
      val presentationProbability = pigeonVar_list[6] as Double
      val includeOtherOption = pigeonVar_list[7] as Boolean
      val includeCloseOption = pigeonVar_list[8] as Boolean
      return PSurvey(id, assignmentKey, title, message, options, presentationCondition, presentationProbability, includeOtherOption, includeCloseOption)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      assignmentKey,
      title,
      message,
      options,
      presentationCondition,
      presentationProbability,
      includeOtherOption,
      includeCloseOption,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PSurvey) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PSurveyOption (
  val id: String? = null,
  val text: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PSurveyOption {
      val id = pigeonVar_list[0] as String?
      val text = pigeonVar_list[1] as String?
      return PSurveyOption(id, text)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      text,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PSurveyOption) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PPurchaseResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchaseCancelled (
  val ignore: Boolean? = null
) : PPurchaseResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchaseCancelled {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPurchaseCancelled(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchaseCancelled) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchasePurchased (
  val ignore: Boolean? = null
) : PPurchaseResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchasePurchased {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPurchasePurchased(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchasePurchased) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchasePending (
  val ignore: Boolean? = null
) : PPurchaseResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchasePending {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPurchasePending(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchasePending) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchaseFailed (
  val error: String? = null
) : PPurchaseResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchaseFailed {
      val error = pigeonVar_list[0] as String?
      return PPurchaseFailed(error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      error,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchaseFailed) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PRestorationResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PRestorationRestored (
  val ignore: Boolean? = null
) : PRestorationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRestorationRestored {
      val ignore = pigeonVar_list[0] as Boolean?
      return PRestorationRestored(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRestorationRestored) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PRestorationFailed (
  val error: String? = null
) : PRestorationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRestorationFailed {
      val error = pigeonVar_list[0] as String?
      return PRestorationFailed(error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      error,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRestorationFailed) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PRestoreType 
/** Generated class from Pigeon that represents data sent in messages. */
data class PViaPurchase (
  val storeTransaction: PStoreTransaction? = null
) : PRestoreType()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PViaPurchase {
      val storeTransaction = pigeonVar_list[0] as PStoreTransaction?
      return PViaPurchase(storeTransaction)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      storeTransaction,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PViaPurchase) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PViaRestore (
  val ignore: Boolean? = null
) : PRestoreType()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PViaRestore {
      val ignore = pigeonVar_list[0] as Boolean?
      return PViaRestore(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PViaRestore) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PRestoreFailed (
  val title: String? = null,
  val message: String? = null,
  val closeButtonTitle: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRestoreFailed {
      val title = pigeonVar_list[0] as String?
      val message = pigeonVar_list[1] as String?
      val closeButtonTitle = pigeonVar_list[2] as String?
      return PRestoreFailed(title, message, closeButtonTitle)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      title,
      message,
      closeButtonTitle,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRestoreFailed) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PLogging (
  val level: PLogLevel? = null,
  val scopes: List<PLogScope>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PLogging {
      val level = pigeonVar_list[0] as PLogLevel?
      val scopes = pigeonVar_list[1] as List<PLogScope>?
      return PLogging(level, scopes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      level,
      scopes,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PLogging) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStoreTransaction (
  val configRequestId: String,
  val appSessionId: String,
  val transactionDate: String? = null,
  val originalTransactionIdentifier: String,
  val storeTransactionId: String? = null,
  val originalTransactionDate: String? = null,
  val webOrderLineItemID: String? = null,
  val appBundleId: String? = null,
  val subscriptionGroupId: String? = null,
  val isUpgraded: Boolean? = null,
  val expirationDate: String? = null,
  val offerId: String? = null,
  val revocationDate: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStoreTransaction {
      val configRequestId = pigeonVar_list[0] as String
      val appSessionId = pigeonVar_list[1] as String
      val transactionDate = pigeonVar_list[2] as String?
      val originalTransactionIdentifier = pigeonVar_list[3] as String
      val storeTransactionId = pigeonVar_list[4] as String?
      val originalTransactionDate = pigeonVar_list[5] as String?
      val webOrderLineItemID = pigeonVar_list[6] as String?
      val appBundleId = pigeonVar_list[7] as String?
      val subscriptionGroupId = pigeonVar_list[8] as String?
      val isUpgraded = pigeonVar_list[9] as Boolean?
      val expirationDate = pigeonVar_list[10] as String?
      val offerId = pigeonVar_list[11] as String?
      val revocationDate = pigeonVar_list[12] as String?
      return PStoreTransaction(configRequestId, appSessionId, transactionDate, originalTransactionIdentifier, storeTransactionId, originalTransactionDate, webOrderLineItemID, appBundleId, subscriptionGroupId, isUpgraded, expirationDate, offerId, revocationDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      configRequestId,
      appSessionId,
      transactionDate,
      originalTransactionIdentifier,
      storeTransactionId,
      originalTransactionDate,
      webOrderLineItemID,
      appBundleId,
      subscriptionGroupId,
      isUpgraded,
      expirationDate,
      offerId,
      revocationDate,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStoreTransaction) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStoreProduct (
  val entitlements: List<PEntitlement>,
  val productIdentifier: String,
  val subscriptionGroupIdentifier: String? = null,
  val attributes: Map<String, String>,
  val localizedPrice: String,
  val localizedSubscriptionPeriod: String,
  val period: String,
  val periodly: String,
  val periodWeeks: Long,
  val periodWeeksString: String,
  val periodMonths: Long,
  val periodMonthsString: String,
  val periodYears: Long,
  val periodYearsString: String,
  val periodDays: Long,
  val periodDaysString: String,
  val dailyPrice: String,
  val weeklyPrice: String,
  val monthlyPrice: String,
  val yearlyPrice: String,
  val hasFreeTrial: Boolean,
  val trialPeriodEndDate: String? = null,
  val trialPeriodEndDateString: String,
  val localizedTrialPeriodPrice: String,
  val trialPeriodPrice: Double,
  val trialPeriodDays: Long,
  val trialPeriodDaysString: String,
  val trialPeriodWeeks: Long,
  val trialPeriodWeeksString: String,
  val trialPeriodMonths: Long,
  val trialPeriodMonthsString: String,
  val trialPeriodYears: Long,
  val trialPeriodYearsString: String,
  val trialPeriodText: String,
  val locale: String,
  val languageCode: String? = null,
  val currencySymbol: String? = null,
  val currencyCode: String? = null,
  val isFamilyShareable: Boolean,
  val regionCode: String? = null,
  val price: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStoreProduct {
      val entitlements = pigeonVar_list[0] as List<PEntitlement>
      val productIdentifier = pigeonVar_list[1] as String
      val subscriptionGroupIdentifier = pigeonVar_list[2] as String?
      val attributes = pigeonVar_list[3] as Map<String, String>
      val localizedPrice = pigeonVar_list[4] as String
      val localizedSubscriptionPeriod = pigeonVar_list[5] as String
      val period = pigeonVar_list[6] as String
      val periodly = pigeonVar_list[7] as String
      val periodWeeks = pigeonVar_list[8] as Long
      val periodWeeksString = pigeonVar_list[9] as String
      val periodMonths = pigeonVar_list[10] as Long
      val periodMonthsString = pigeonVar_list[11] as String
      val periodYears = pigeonVar_list[12] as Long
      val periodYearsString = pigeonVar_list[13] as String
      val periodDays = pigeonVar_list[14] as Long
      val periodDaysString = pigeonVar_list[15] as String
      val dailyPrice = pigeonVar_list[16] as String
      val weeklyPrice = pigeonVar_list[17] as String
      val monthlyPrice = pigeonVar_list[18] as String
      val yearlyPrice = pigeonVar_list[19] as String
      val hasFreeTrial = pigeonVar_list[20] as Boolean
      val trialPeriodEndDate = pigeonVar_list[21] as String?
      val trialPeriodEndDateString = pigeonVar_list[22] as String
      val localizedTrialPeriodPrice = pigeonVar_list[23] as String
      val trialPeriodPrice = pigeonVar_list[24] as Double
      val trialPeriodDays = pigeonVar_list[25] as Long
      val trialPeriodDaysString = pigeonVar_list[26] as String
      val trialPeriodWeeks = pigeonVar_list[27] as Long
      val trialPeriodWeeksString = pigeonVar_list[28] as String
      val trialPeriodMonths = pigeonVar_list[29] as Long
      val trialPeriodMonthsString = pigeonVar_list[30] as String
      val trialPeriodYears = pigeonVar_list[31] as Long
      val trialPeriodYearsString = pigeonVar_list[32] as String
      val trialPeriodText = pigeonVar_list[33] as String
      val locale = pigeonVar_list[34] as String
      val languageCode = pigeonVar_list[35] as String?
      val currencySymbol = pigeonVar_list[36] as String?
      val currencyCode = pigeonVar_list[37] as String?
      val isFamilyShareable = pigeonVar_list[38] as Boolean
      val regionCode = pigeonVar_list[39] as String?
      val price = pigeonVar_list[40] as Double
      return PStoreProduct(entitlements, productIdentifier, subscriptionGroupIdentifier, attributes, localizedPrice, localizedSubscriptionPeriod, period, periodly, periodWeeks, periodWeeksString, periodMonths, periodMonthsString, periodYears, periodYearsString, periodDays, periodDaysString, dailyPrice, weeklyPrice, monthlyPrice, yearlyPrice, hasFreeTrial, trialPeriodEndDate, trialPeriodEndDateString, localizedTrialPeriodPrice, trialPeriodPrice, trialPeriodDays, trialPeriodDaysString, trialPeriodWeeks, trialPeriodWeeksString, trialPeriodMonths, trialPeriodMonthsString, trialPeriodYears, trialPeriodYearsString, trialPeriodText, locale, languageCode, currencySymbol, currencyCode, isFamilyShareable, regionCode, price)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      entitlements,
      productIdentifier,
      subscriptionGroupIdentifier,
      attributes,
      localizedPrice,
      localizedSubscriptionPeriod,
      period,
      periodly,
      periodWeeks,
      periodWeeksString,
      periodMonths,
      periodMonthsString,
      periodYears,
      periodYearsString,
      periodDays,
      periodDaysString,
      dailyPrice,
      weeklyPrice,
      monthlyPrice,
      yearlyPrice,
      hasFreeTrial,
      trialPeriodEndDate,
      trialPeriodEndDateString,
      localizedTrialPeriodPrice,
      trialPeriodPrice,
      trialPeriodDays,
      trialPeriodDaysString,
      trialPeriodWeeks,
      trialPeriodWeeksString,
      trialPeriodMonths,
      trialPeriodMonthsString,
      trialPeriodYears,
      trialPeriodYearsString,
      trialPeriodText,
      locale,
      languageCode,
      currencySymbol,
      currencyCode,
      isFamilyShareable,
      regionCode,
      price,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStoreProduct) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallOptions (
  val isHapticFeedbackEnabled: Boolean? = null,
  val restoreFailed: PRestoreFailed? = null,
  val shouldShowPurchaseFailureAlert: Boolean? = null,
  val shouldPreload: Boolean? = null,
  val automaticallyDismiss: Boolean? = null,
  val shouldShowWebRestorationAlert: Boolean? = null,
  val transactionBackgroundView: PTransactionBackgroundView? = null,
  val overrideProductsByName: Map<String, String>? = null,
  val shouldShowWebPurchaseConfirmationAlert: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallOptions {
      val isHapticFeedbackEnabled = pigeonVar_list[0] as Boolean?
      val restoreFailed = pigeonVar_list[1] as PRestoreFailed?
      val shouldShowPurchaseFailureAlert = pigeonVar_list[2] as Boolean?
      val shouldPreload = pigeonVar_list[3] as Boolean?
      val automaticallyDismiss = pigeonVar_list[4] as Boolean?
      val shouldShowWebRestorationAlert = pigeonVar_list[5] as Boolean?
      val transactionBackgroundView = pigeonVar_list[6] as PTransactionBackgroundView?
      val overrideProductsByName = pigeonVar_list[7] as Map<String, String>?
      val shouldShowWebPurchaseConfirmationAlert = pigeonVar_list[8] as Boolean?
      return PPaywallOptions(isHapticFeedbackEnabled, restoreFailed, shouldShowPurchaseFailureAlert, shouldPreload, automaticallyDismiss, shouldShowWebRestorationAlert, transactionBackgroundView, overrideProductsByName, shouldShowWebPurchaseConfirmationAlert)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isHapticFeedbackEnabled,
      restoreFailed,
      shouldShowPurchaseFailureAlert,
      shouldPreload,
      automaticallyDismiss,
      shouldShowWebRestorationAlert,
      transactionBackgroundView,
      overrideProductsByName,
      shouldShowWebPurchaseConfirmationAlert,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchaseControllerHost (
  val hostId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchaseControllerHost {
      val hostId = pigeonVar_list[0] as String?
      return PPurchaseControllerHost(hostId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hostId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchaseControllerHost) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PConfigureCompletionHost (
  val hostId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PConfigureCompletionHost {
      val hostId = pigeonVar_list[0] as String?
      return PConfigureCompletionHost(hostId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hostId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PConfigureCompletionHost) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallPresentationHandlerHost (
  val hostId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallPresentationHandlerHost {
      val hostId = pigeonVar_list[0] as String?
      return PPaywallPresentationHandlerHost(hostId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hostId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallPresentationHandlerHost) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PFeatureHandlerHost (
  val hostId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PFeatureHandlerHost {
      val hostId = pigeonVar_list[0] as String?
      return PFeatureHandlerHost(hostId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hostId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PFeatureHandlerHost) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PEntitlement (
  val id: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PEntitlement {
      val id = pigeonVar_list[0] as String?
      return PEntitlement(id)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PEntitlement) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PEntitlements (
  val active: List<PEntitlement>,
  val inactive: List<PEntitlement>,
  val all: List<PEntitlement>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PEntitlements {
      val active = pigeonVar_list[0] as List<PEntitlement>
      val inactive = pigeonVar_list[1] as List<PEntitlement>
      val all = pigeonVar_list[2] as List<PEntitlement>
      return PEntitlements(active, inactive, all)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      active,
      inactive,
      all,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PEntitlements) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PSubscriptionStatus 
/** Generated class from Pigeon that represents data sent in messages. */
data class PActive (
  val entitlements: List<PEntitlement>
) : PSubscriptionStatus()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PActive {
      val entitlements = pigeonVar_list[0] as List<PEntitlement>
      return PActive(entitlements)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      entitlements,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PActive) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PInactive (
  val ignore: Boolean? = null
) : PSubscriptionStatus()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PInactive {
      val ignore = pigeonVar_list[0] as Boolean?
      return PInactive(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PInactive) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PUnknown (
  val ignore: Boolean? = null
) : PSubscriptionStatus()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PUnknown {
      val ignore = pigeonVar_list[0] as Boolean?
      return PUnknown(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PUnknown) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PSuperwallEventInfo (
  val eventType: PEventType,
  val params: Map<String, Any>? = null,
  val placementName: String? = null,
  val deviceAttributes: Map<String, Any>? = null,
  val deepLinkUrl: String? = null,
  val result: PTriggerResult? = null,
  val paywallInfo: PPaywallInfo? = null,
  val transaction: PStoreTransaction? = null,
  val product: PStoreProduct? = null,
  val error: String? = null,
  val triggeredPlacementName: String? = null,
  val attempt: Long? = null,
  val name: String? = null,
  val survey: PSurvey? = null,
  val selectedOption: PSurveyOption? = null,
  val customResponse: String? = null,
  val status: PPaywallPresentationRequestStatusType? = null,
  val reason: PPaywallPresentationRequestStatusReason? = null,
  val restoreType: PRestoreType? = null,
  val userAttributes: Map<String, Any>? = null,
  val token: String? = null,
  val userEnrichment: Map<String, Any>? = null,
  val deviceEnrichment: Map<String, Any>? = null,
  val message: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PSuperwallEventInfo {
      val eventType = pigeonVar_list[0] as PEventType
      val params = pigeonVar_list[1] as Map<String, Any>?
      val placementName = pigeonVar_list[2] as String?
      val deviceAttributes = pigeonVar_list[3] as Map<String, Any>?
      val deepLinkUrl = pigeonVar_list[4] as String?
      val result = pigeonVar_list[5] as PTriggerResult?
      val paywallInfo = pigeonVar_list[6] as PPaywallInfo?
      val transaction = pigeonVar_list[7] as PStoreTransaction?
      val product = pigeonVar_list[8] as PStoreProduct?
      val error = pigeonVar_list[9] as String?
      val triggeredPlacementName = pigeonVar_list[10] as String?
      val attempt = pigeonVar_list[11] as Long?
      val name = pigeonVar_list[12] as String?
      val survey = pigeonVar_list[13] as PSurvey?
      val selectedOption = pigeonVar_list[14] as PSurveyOption?
      val customResponse = pigeonVar_list[15] as String?
      val status = pigeonVar_list[16] as PPaywallPresentationRequestStatusType?
      val reason = pigeonVar_list[17] as PPaywallPresentationRequestStatusReason?
      val restoreType = pigeonVar_list[18] as PRestoreType?
      val userAttributes = pigeonVar_list[19] as Map<String, Any>?
      val token = pigeonVar_list[20] as String?
      val userEnrichment = pigeonVar_list[21] as Map<String, Any>?
      val deviceEnrichment = pigeonVar_list[22] as Map<String, Any>?
      val message = pigeonVar_list[23] as String?
      return PSuperwallEventInfo(eventType, params, placementName, deviceAttributes, deepLinkUrl, result, paywallInfo, transaction, product, error, triggeredPlacementName, attempt, name, survey, selectedOption, customResponse, status, reason, restoreType, userAttributes, token, userEnrichment, deviceEnrichment, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      eventType,
      params,
      placementName,
      deviceAttributes,
      deepLinkUrl,
      result,
      paywallInfo,
      transaction,
      product,
      error,
      triggeredPlacementName,
      attempt,
      name,
      survey,
      selectedOption,
      customResponse,
      status,
      reason,
      restoreType,
      userAttributes,
      token,
      userEnrichment,
      deviceEnrichment,
      message,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PSuperwallEventInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PPaywallPresentationRequestStatusReason 
/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonDebuggerPresented (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonDebuggerPresented {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonDebuggerPresented(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonDebuggerPresented) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonPaywallAlreadyPresented (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonPaywallAlreadyPresented {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonPaywallAlreadyPresented(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonPaywallAlreadyPresented) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonHoldout (
  val experiment: PExperiment
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonHoldout {
      val experiment = pigeonVar_list[0] as PExperiment
      return PStatusReasonHoldout(experiment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experiment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonHoldout) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonNoAudienceMatch (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonNoAudienceMatch {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonNoAudienceMatch(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonNoAudienceMatch) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonPlacementNotFound (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonPlacementNotFound {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonPlacementNotFound(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonPlacementNotFound) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonNoPaywallVc (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonNoPaywallVc {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonNoPaywallVc(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonNoPaywallVc) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonNoPresenter (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonNoPresenter {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonNoPresenter(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonNoPresenter) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonNoConfig (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonNoConfig {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonNoConfig(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonNoConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PStatusReasonSubsStatusTimeout (
  val ignore: Boolean? = null
) : PPaywallPresentationRequestStatusReason()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PStatusReasonSubsStatusTimeout {
      val ignore = pigeonVar_list[0] as Boolean?
      return PStatusReasonSubsStatusTimeout(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PStatusReasonSubsStatusTimeout) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PIdentityOptions (
  val restorePaywallAssignments: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PIdentityOptions {
      val restorePaywallAssignments = pigeonVar_list[0] as Boolean?
      return PIdentityOptions(restorePaywallAssignments)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      restorePaywallAssignments,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PIdentityOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PExperiment (
  val id: String,
  val groupId: String,
  val variant: PVariant
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PExperiment {
      val id = pigeonVar_list[0] as String
      val groupId = pigeonVar_list[1] as String
      val variant = pigeonVar_list[2] as PVariant
      return PExperiment(id, groupId, variant)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      groupId,
      variant,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PExperiment) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PTriggerResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PPlacementNotFoundTriggerResult (
  val ignore: Boolean? = null
) : PTriggerResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPlacementNotFoundTriggerResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPlacementNotFoundTriggerResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPlacementNotFoundTriggerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PNoAudienceMatchTriggerResult (
  val ignore: Boolean? = null
) : PTriggerResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PNoAudienceMatchTriggerResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PNoAudienceMatchTriggerResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PNoAudienceMatchTriggerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallTriggerResult (
  val experiment: PExperiment
) : PTriggerResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallTriggerResult {
      val experiment = pigeonVar_list[0] as PExperiment
      return PPaywallTriggerResult(experiment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experiment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallTriggerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PHoldoutTriggerResult (
  val experiment: PExperiment
) : PTriggerResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PHoldoutTriggerResult {
      val experiment = pigeonVar_list[0] as PExperiment
      return PHoldoutTriggerResult(experiment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experiment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PHoldoutTriggerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PErrorTriggerResult (
  val error: String
) : PTriggerResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PErrorTriggerResult {
      val error = pigeonVar_list[0] as String
      return PErrorTriggerResult(error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      error,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PErrorTriggerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PVariant (
  val id: String,
  val type: PVariantType,
  val paywallId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PVariant {
      val id = pigeonVar_list[0] as String
      val type = pigeonVar_list[1] as PVariantType
      val paywallId = pigeonVar_list[2] as String?
      return PVariant(id, type, paywallId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      type,
      paywallId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PVariant) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PConfirmedAssignment (
  val experimentId: String,
  val variant: PVariant
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PConfirmedAssignment {
      val experimentId = pigeonVar_list[0] as String
      val variant = pigeonVar_list[1] as PVariant
      return PConfirmedAssignment(experimentId, variant)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experimentId,
      variant,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PConfirmedAssignment) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PPaywallResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PPurchasedPaywallResult (
  val productId: String
) : PPaywallResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPurchasedPaywallResult {
      val productId = pigeonVar_list[0] as String
      return PPurchasedPaywallResult(productId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      productId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPurchasedPaywallResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PDeclinedPaywallResult (
  val ignore: Boolean? = null
) : PPaywallResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PDeclinedPaywallResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PDeclinedPaywallResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PDeclinedPaywallResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PRestoredPaywallResult (
  val ignore: Boolean? = null
) : PPaywallResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PRestoredPaywallResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PRestoredPaywallResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PRestoredPaywallResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class PPresentationResult 
/** Generated class from Pigeon that represents data sent in messages. */
data class PPlacementNotFoundPresentationResult (
  val ignore: Boolean? = null
) : PPresentationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPlacementNotFoundPresentationResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPlacementNotFoundPresentationResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPlacementNotFoundPresentationResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PNoAudienceMatchPresentationResult (
  val ignore: Boolean? = null
) : PPresentationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PNoAudienceMatchPresentationResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PNoAudienceMatchPresentationResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PNoAudienceMatchPresentationResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallPresentationResult (
  val experiment: PExperiment
) : PPresentationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallPresentationResult {
      val experiment = pigeonVar_list[0] as PExperiment
      return PPaywallPresentationResult(experiment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experiment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallPresentationResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PHoldoutPresentationResult (
  val experiment: PExperiment
) : PPresentationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PHoldoutPresentationResult {
      val experiment = pigeonVar_list[0] as PExperiment
      return PHoldoutPresentationResult(experiment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      experiment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PHoldoutPresentationResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PPaywallNotAvailablePresentationResult (
  val ignore: Boolean? = null
) : PPresentationResult()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PPaywallNotAvailablePresentationResult {
      val ignore = pigeonVar_list[0] as Boolean?
      return PPaywallNotAvailablePresentationResult(ignore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ignore,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PPaywallNotAvailablePresentationResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsSuperwallHostGenerated(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class SuperwallHostGeneratedPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PFeatureGatingBehavior.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PPaywallCloseReason.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PLocalNotificationType.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PComputedPropertyRequestType.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PSurveyShowCondition.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PNetworkEnvironment.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PLogLevel.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PTransactionBackgroundView.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PLogScope.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PConfigurationStatus.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PEventType.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PSubscriptionStatusType.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PPaywallPresentationRequestStatusType.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PVariantType.ofRaw(it.toInt())
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PPaywallSkippedReason.ofRaw(it.toInt())
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PSuccessRedemptionResult.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PErrorRedemptionResult.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PErrorInfo.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PExpiredCodeRedemptionResult.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PExpiredCodeInfo.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PInvalidCodeRedemptionResult.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PExpiredSubscriptionCode.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRedemptionInfo.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PAppUserOwnership.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PDeviceOwnership.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchaserInfo.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStripeStoreIdentifiers.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaddleStoreIdentifiers.fromList(it)
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PUnknownStoreIdentifiers.fromList(it)
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRedemptionPaywallInfo.fromList(it)
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PSuperwallOptions.fromList(it)
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallInfo.fromList(it)
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PProduct.fromList(it)
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PLocalNotification.fromList(it)
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PComputedPropertyRequest.fromList(it)
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PSurvey.fromList(it)
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PSurveyOption.fromList(it)
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchaseCancelled.fromList(it)
        }
      }
      167.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchasePurchased.fromList(it)
        }
      }
      168.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchasePending.fromList(it)
        }
      }
      169.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchaseFailed.fromList(it)
        }
      }
      170.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRestorationRestored.fromList(it)
        }
      }
      171.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRestorationFailed.fromList(it)
        }
      }
      172.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PViaPurchase.fromList(it)
        }
      }
      173.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PViaRestore.fromList(it)
        }
      }
      174.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRestoreFailed.fromList(it)
        }
      }
      175.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PLogging.fromList(it)
        }
      }
      176.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStoreTransaction.fromList(it)
        }
      }
      177.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStoreProduct.fromList(it)
        }
      }
      178.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallOptions.fromList(it)
        }
      }
      179.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchaseControllerHost.fromList(it)
        }
      }
      180.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PConfigureCompletionHost.fromList(it)
        }
      }
      181.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallPresentationHandlerHost.fromList(it)
        }
      }
      182.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PFeatureHandlerHost.fromList(it)
        }
      }
      183.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PEntitlement.fromList(it)
        }
      }
      184.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PEntitlements.fromList(it)
        }
      }
      185.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PActive.fromList(it)
        }
      }
      186.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PInactive.fromList(it)
        }
      }
      187.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PUnknown.fromList(it)
        }
      }
      188.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PSuperwallEventInfo.fromList(it)
        }
      }
      189.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonDebuggerPresented.fromList(it)
        }
      }
      190.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonPaywallAlreadyPresented.fromList(it)
        }
      }
      191.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonHoldout.fromList(it)
        }
      }
      192.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonNoAudienceMatch.fromList(it)
        }
      }
      193.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonPlacementNotFound.fromList(it)
        }
      }
      194.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonNoPaywallVc.fromList(it)
        }
      }
      195.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonNoPresenter.fromList(it)
        }
      }
      196.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonNoConfig.fromList(it)
        }
      }
      197.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PStatusReasonSubsStatusTimeout.fromList(it)
        }
      }
      198.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PIdentityOptions.fromList(it)
        }
      }
      199.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PExperiment.fromList(it)
        }
      }
      200.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPlacementNotFoundTriggerResult.fromList(it)
        }
      }
      201.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PNoAudienceMatchTriggerResult.fromList(it)
        }
      }
      202.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallTriggerResult.fromList(it)
        }
      }
      203.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHoldoutTriggerResult.fromList(it)
        }
      }
      204.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PErrorTriggerResult.fromList(it)
        }
      }
      205.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PVariant.fromList(it)
        }
      }
      206.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PConfirmedAssignment.fromList(it)
        }
      }
      207.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPurchasedPaywallResult.fromList(it)
        }
      }
      208.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PDeclinedPaywallResult.fromList(it)
        }
      }
      209.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PRestoredPaywallResult.fromList(it)
        }
      }
      210.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPlacementNotFoundPresentationResult.fromList(it)
        }
      }
      211.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PNoAudienceMatchPresentationResult.fromList(it)
        }
      }
      212.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallPresentationResult.fromList(it)
        }
      }
      213.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHoldoutPresentationResult.fromList(it)
        }
      }
      214.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PPaywallNotAvailablePresentationResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PFeatureGatingBehavior -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PPaywallCloseReason -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PLocalNotificationType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is PComputedPropertyRequestType -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is PSurveyShowCondition -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is PNetworkEnvironment -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is PLogLevel -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is PTransactionBackgroundView -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is PLogScope -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is PConfigurationStatus -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is PEventType -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is PSubscriptionStatusType -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is PPaywallPresentationRequestStatusType -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is PVariantType -> {
        stream.write(142)
        writeValue(stream, value.raw)
      }
      is PPaywallSkippedReason -> {
        stream.write(143)
        writeValue(stream, value.raw)
      }
      is PSuccessRedemptionResult -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is PErrorRedemptionResult -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is PErrorInfo -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is PExpiredCodeRedemptionResult -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is PExpiredCodeInfo -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is PInvalidCodeRedemptionResult -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is PExpiredSubscriptionCode -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is PRedemptionInfo -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is PAppUserOwnership -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is PDeviceOwnership -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is PPurchaserInfo -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is PStripeStoreIdentifiers -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is PPaddleStoreIdentifiers -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      is PUnknownStoreIdentifiers -> {
        stream.write(157)
        writeValue(stream, value.toList())
      }
      is PRedemptionPaywallInfo -> {
        stream.write(158)
        writeValue(stream, value.toList())
      }
      is PSuperwallOptions -> {
        stream.write(159)
        writeValue(stream, value.toList())
      }
      is PPaywallInfo -> {
        stream.write(160)
        writeValue(stream, value.toList())
      }
      is PProduct -> {
        stream.write(161)
        writeValue(stream, value.toList())
      }
      is PLocalNotification -> {
        stream.write(162)
        writeValue(stream, value.toList())
      }
      is PComputedPropertyRequest -> {
        stream.write(163)
        writeValue(stream, value.toList())
      }
      is PSurvey -> {
        stream.write(164)
        writeValue(stream, value.toList())
      }
      is PSurveyOption -> {
        stream.write(165)
        writeValue(stream, value.toList())
      }
      is PPurchaseCancelled -> {
        stream.write(166)
        writeValue(stream, value.toList())
      }
      is PPurchasePurchased -> {
        stream.write(167)
        writeValue(stream, value.toList())
      }
      is PPurchasePending -> {
        stream.write(168)
        writeValue(stream, value.toList())
      }
      is PPurchaseFailed -> {
        stream.write(169)
        writeValue(stream, value.toList())
      }
      is PRestorationRestored -> {
        stream.write(170)
        writeValue(stream, value.toList())
      }
      is PRestorationFailed -> {
        stream.write(171)
        writeValue(stream, value.toList())
      }
      is PViaPurchase -> {
        stream.write(172)
        writeValue(stream, value.toList())
      }
      is PViaRestore -> {
        stream.write(173)
        writeValue(stream, value.toList())
      }
      is PRestoreFailed -> {
        stream.write(174)
        writeValue(stream, value.toList())
      }
      is PLogging -> {
        stream.write(175)
        writeValue(stream, value.toList())
      }
      is PStoreTransaction -> {
        stream.write(176)
        writeValue(stream, value.toList())
      }
      is PStoreProduct -> {
        stream.write(177)
        writeValue(stream, value.toList())
      }
      is PPaywallOptions -> {
        stream.write(178)
        writeValue(stream, value.toList())
      }
      is PPurchaseControllerHost -> {
        stream.write(179)
        writeValue(stream, value.toList())
      }
      is PConfigureCompletionHost -> {
        stream.write(180)
        writeValue(stream, value.toList())
      }
      is PPaywallPresentationHandlerHost -> {
        stream.write(181)
        writeValue(stream, value.toList())
      }
      is PFeatureHandlerHost -> {
        stream.write(182)
        writeValue(stream, value.toList())
      }
      is PEntitlement -> {
        stream.write(183)
        writeValue(stream, value.toList())
      }
      is PEntitlements -> {
        stream.write(184)
        writeValue(stream, value.toList())
      }
      is PActive -> {
        stream.write(185)
        writeValue(stream, value.toList())
      }
      is PInactive -> {
        stream.write(186)
        writeValue(stream, value.toList())
      }
      is PUnknown -> {
        stream.write(187)
        writeValue(stream, value.toList())
      }
      is PSuperwallEventInfo -> {
        stream.write(188)
        writeValue(stream, value.toList())
      }
      is PStatusReasonDebuggerPresented -> {
        stream.write(189)
        writeValue(stream, value.toList())
      }
      is PStatusReasonPaywallAlreadyPresented -> {
        stream.write(190)
        writeValue(stream, value.toList())
      }
      is PStatusReasonHoldout -> {
        stream.write(191)
        writeValue(stream, value.toList())
      }
      is PStatusReasonNoAudienceMatch -> {
        stream.write(192)
        writeValue(stream, value.toList())
      }
      is PStatusReasonPlacementNotFound -> {
        stream.write(193)
        writeValue(stream, value.toList())
      }
      is PStatusReasonNoPaywallVc -> {
        stream.write(194)
        writeValue(stream, value.toList())
      }
      is PStatusReasonNoPresenter -> {
        stream.write(195)
        writeValue(stream, value.toList())
      }
      is PStatusReasonNoConfig -> {
        stream.write(196)
        writeValue(stream, value.toList())
      }
      is PStatusReasonSubsStatusTimeout -> {
        stream.write(197)
        writeValue(stream, value.toList())
      }
      is PIdentityOptions -> {
        stream.write(198)
        writeValue(stream, value.toList())
      }
      is PExperiment -> {
        stream.write(199)
        writeValue(stream, value.toList())
      }
      is PPlacementNotFoundTriggerResult -> {
        stream.write(200)
        writeValue(stream, value.toList())
      }
      is PNoAudienceMatchTriggerResult -> {
        stream.write(201)
        writeValue(stream, value.toList())
      }
      is PPaywallTriggerResult -> {
        stream.write(202)
        writeValue(stream, value.toList())
      }
      is PHoldoutTriggerResult -> {
        stream.write(203)
        writeValue(stream, value.toList())
      }
      is PErrorTriggerResult -> {
        stream.write(204)
        writeValue(stream, value.toList())
      }
      is PVariant -> {
        stream.write(205)
        writeValue(stream, value.toList())
      }
      is PConfirmedAssignment -> {
        stream.write(206)
        writeValue(stream, value.toList())
      }
      is PPurchasedPaywallResult -> {
        stream.write(207)
        writeValue(stream, value.toList())
      }
      is PDeclinedPaywallResult -> {
        stream.write(208)
        writeValue(stream, value.toList())
      }
      is PRestoredPaywallResult -> {
        stream.write(209)
        writeValue(stream, value.toList())
      }
      is PPlacementNotFoundPresentationResult -> {
        stream.write(210)
        writeValue(stream, value.toList())
      }
      is PNoAudienceMatchPresentationResult -> {
        stream.write(211)
        writeValue(stream, value.toList())
      }
      is PPaywallPresentationResult -> {
        stream.write(212)
        writeValue(stream, value.toList())
      }
      is PHoldoutPresentationResult -> {
        stream.write(213)
        writeValue(stream, value.toList())
      }
      is PPaywallNotAvailablePresentationResult -> {
        stream.write(214)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val SuperwallHostGeneratedPigeonMethodCodec = StandardMethodCodec(SuperwallHostGeneratedPigeonCodec())


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PSuperwallHostApi {
  fun configure(apiKey: String, purchaseController: PPurchaseControllerHost?, options: PSuperwallOptions?, completion: PConfigureCompletionHost?, callback: (Result<Unit>) -> Unit)
  fun reset()
  fun setDelegate(hasDelegate: Boolean)
  fun confirmAllAssignments(callback: (Result<List<PConfirmedAssignment>>) -> Unit)
  fun restorePurchases(callback: (Result<PRestorationResult>) -> Unit)
  fun getLogLevel(): String
  fun setLogLevel(logLevel: String)
  fun getUserAttributes(): Map<String, Any>
  fun setUserAttributes(userAttributes: Map<String, Any>)
  fun getDeviceAttributes(callback: (Result<Map<String, Any>>) -> Unit)
  fun getLocaleIdentifier(): String?
  fun setLocaleIdentifier(localeIdentifier: String?)
  fun getUserId(): String
  fun getIsLoggedIn(): Boolean
  fun getIsInitialized(): Boolean
  fun identify(userId: String, identityOptions: PIdentityOptions?)
  fun getEntitlements(): PEntitlements
  fun getSubscriptionStatus(): PSubscriptionStatus
  fun setSubscriptionStatus(subscriptionStatus: PSubscriptionStatus)
  fun getConfigurationStatus(): PConfigurationStatus
  fun getIsConfigured(): Boolean
  fun getPresentationResult(placement: String, params: Map<String, Any>?, callback: (Result<PPresentationResult>) -> Unit)
  fun getIsPaywallPresented(): Boolean
  fun preloadAllPaywalls()
  fun preloadPaywallsForPlacements(placementNames: List<String>)
  fun handleDeepLink(url: String): Boolean
  fun togglePaywallSpinner(isHidden: Boolean)
  fun getLatestPaywallInfo(): PPaywallInfo?
  fun registerPlacement(placement: String, params: Map<String, Any>?, handler: PPaywallPresentationHandlerHost?, feature: PFeatureHandlerHost?, callback: (Result<Unit>) -> Unit)
  fun dismiss()
  fun getOverrideProductsByName(): Map<String, String>?
  fun setOverrideProductsByName(overrideProducts: Map<String, String>?)

  companion object {
    /** The codec used by PSuperwallHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
    /** Sets up an instance of `PSuperwallHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PSuperwallHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.configure$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val apiKeyArg = args[0] as String
            val purchaseControllerArg = args[1] as PPurchaseControllerHost?
            val optionsArg = args[2] as PSuperwallOptions?
            val completionArg = args[3] as PConfigureCompletionHost?
            api.configure(apiKeyArg, purchaseControllerArg, optionsArg, completionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.reset$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.reset()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setDelegate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hasDelegateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setDelegate(hasDelegateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.confirmAllAssignments$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.confirmAllAssignments{ result: Result<List<PConfirmedAssignment>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.restorePurchases$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.restorePurchases{ result: Result<PRestorationResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLogLevel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLogLevel())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLogLevel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val logLevelArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.setLogLevel(logLevelArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserAttributes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getUserAttributes())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setUserAttributes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userAttributesArg = args[0] as Map<String, Any>
            val wrapped: List<Any?> = try {
              api.setUserAttributes(userAttributesArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getDeviceAttributes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getDeviceAttributes{ result: Result<Map<String, Any>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLocaleIdentifier$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLocaleIdentifier())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLocaleIdentifier$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val localeIdentifierArg = args[0] as String?
            val wrapped: List<Any?> = try {
              api.setLocaleIdentifier(localeIdentifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserId$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getUserId())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsLoggedIn$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getIsLoggedIn())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsInitialized$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getIsInitialized())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.identify$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val identityOptionsArg = args[1] as PIdentityOptions?
            val wrapped: List<Any?> = try {
              api.identify(userIdArg, identityOptionsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getEntitlements$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getEntitlements())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getSubscriptionStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getSubscriptionStatus())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setSubscriptionStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val subscriptionStatusArg = args[0] as PSubscriptionStatus
            val wrapped: List<Any?> = try {
              api.setSubscriptionStatus(subscriptionStatusArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getConfigurationStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getConfigurationStatus())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsConfigured$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getIsConfigured())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getPresentationResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val placementArg = args[0] as String
            val paramsArg = args[1] as Map<String, Any>?
            api.getPresentationResult(placementArg, paramsArg) { result: Result<PPresentationResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsPaywallPresented$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getIsPaywallPresented())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadAllPaywalls$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.preloadAllPaywalls()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadPaywallsForPlacements$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val placementNamesArg = args[0] as List<String>
            val wrapped: List<Any?> = try {
              api.preloadPaywallsForPlacements(placementNamesArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.handleDeepLink$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.handleDeepLink(urlArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.togglePaywallSpinner$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val isHiddenArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.togglePaywallSpinner(isHiddenArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLatestPaywallInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLatestPaywallInfo())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.registerPlacement$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val placementArg = args[0] as String
            val paramsArg = args[1] as Map<String, Any>?
            val handlerArg = args[2] as PPaywallPresentationHandlerHost?
            val featureArg = args[3] as PFeatureHandlerHost?
            api.registerPlacement(placementArg, paramsArg, handlerArg, featureArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.dismiss$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.dismiss()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getOverrideProductsByName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getOverrideProductsByName())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setOverrideProductsByName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val overrideProductsArg = args[0] as Map<String, String>?
            val wrapped: List<Any?> = try {
              api.setOverrideProductsByName(overrideProductsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PSuperwallDelegateGenerated(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PSuperwallDelegateGenerated. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
  }
  fun subscriptionStatusDidChange(fromArg: PSubscriptionStatus, toArg: PSubscriptionStatus, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(fromArg, toArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun handleSuperwallEvent(eventInfoArg: PSuperwallEventInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun handleCustomPaywallAction(nameArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(nameArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun willDismissPaywall(paywallInfoArg: PPaywallInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun willPresentPaywall(paywallInfoArg: PPaywallInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didDismissPaywall(paywallInfoArg: PPaywallInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didPresentPaywall(paywallInfoArg: PPaywallInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun paywallWillOpenURL(urlArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun paywallWillOpenDeepLink(urlArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun handleLog(levelArg: String, scopeArg: String, messageArg: String?, infoArg: Map<String, Any>?, errorArg: String?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(levelArg, scopeArg, messageArg, infoArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun willRedeemLink(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willRedeemLink$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didRedeemLink(resultArg: PRedemptionResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didRedeemLink$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun handleSuperwallDeepLink(fullURLArg: String, pathComponentsArg: List<String>, queryParametersArg: Map<String, String>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallDeepLink$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(fullURLArg, pathComponentsArg, queryParametersArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PPurchaseControllerGenerated(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PPurchaseControllerGenerated. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
  }
  fun purchaseFromAppStore(productIdArg: String, callback: (Result<PPurchaseResult>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(productIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as PPurchaseResult
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun purchaseFromGooglePlay(productIdArg: String, basePlanIdArg: String?, offerIdArg: String?, callback: (Result<PPurchaseResult>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(productIdArg, basePlanIdArg, offerIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as PPurchaseResult
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun restorePurchases(callback: (Result<PRestorationResult>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.restorePurchases$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as PRestorationResult
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PConfigureCompletionGenerated(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PConfigureCompletionGenerated. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
  }
  fun onConfigureCompleted(successArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(successArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PPaywallPresentationHandlerGenerated(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PPaywallPresentationHandlerGenerated. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
  }
  fun onPresent(paywallInfoArg: PPaywallInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDismiss(paywallInfoArg: PPaywallInfo, paywallResultArg: PPaywallResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paywallInfoArg, paywallResultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onError(errorArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onSkip(reasonArg: PPaywallSkippedReason, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(reasonArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PFeatureHandlerGenerated(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PFeatureHandlerGenerated. */
    val codec: MessageCodec<Any?> by lazy {
      SuperwallHostGeneratedPigeonCodec()
    }
  }
  fun onFeature(idArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}

private class SuperwallHostGeneratedPigeonStreamHandler<T>(
    val wrapper: SuperwallHostGeneratedPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface SuperwallHostGeneratedPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class StreamSubscriptionStatusStreamHandler : SuperwallHostGeneratedPigeonEventChannelWrapper<PSubscriptionStatus> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: StreamSubscriptionStatusStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.superwallkit_flutter.SubscriptionStatusStream.streamSubscriptionStatus"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = SuperwallHostGeneratedPigeonStreamHandler<PSubscriptionStatus>(streamHandler)
      EventChannel(messenger, channelName, SuperwallHostGeneratedPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
